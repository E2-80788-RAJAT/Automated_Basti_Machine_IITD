
level_sensor1.2_VL53L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007ca4  08007ca4  00008ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cbc  08007cbc  000092cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc4  08007cc4  000092cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc4  08007cc4  00008cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  08007ccc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200002cc  08007f98  000092cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08007f98  00009530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010097  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee0  00000000  00000000  00019393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0001b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b6  00000000  00000000  0001bf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002237b  00000000  00000000  0001c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc87  00000000  00000000  0003ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceedd  00000000  00000000  0004e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d7ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  0011d7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00120d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200002cc 	.word	0x200002cc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007c8c 	.word	0x08007c8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200002d0 	.word	0x200002d0
 8000200:	08007c8c 	.word	0x08007c8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LidarInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LidarInit() {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	VL53L0X_WaitDeviceBooted( Dev );
 8000536:	4b2d      	ldr	r3, [pc, #180]	@ (80005ec <LidarInit+0xbc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fe74 	bl	8003228 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000540:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <LidarInit+0xbc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fb8b 	bl	8002c60 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800054a:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <LidarInit+0xbc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fcea 	bl	8002f28 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <LidarInit+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	1c7a      	adds	r2, r7, #1
 800055a:	1cb9      	adds	r1, r7, #2
 800055c:	4618      	mov	r0, r3
 800055e:	f003 fb81 	bl	8003c64 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000562:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <LidarInit+0xbc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1cfa      	adds	r2, r7, #3
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fffc 	bl	8004568 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <LidarInit+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fef4 	bl	8003364 <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <LidarInit+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2201      	movs	r2, #1
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f967 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800058a:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <LidarInit+0xbc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2201      	movs	r2, #1
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f960 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <LidarInit+0xbc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f641 1299 	movw	r2, #6553	@ 0x1999
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fa08 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80005a8:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <LidarInit+0xbc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fa00 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <LidarInit+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 ff2d 	bl	8003420 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <LidarInit+0xbc>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2212      	movs	r2, #18
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ff4c 	bl	800346c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <LidarInit+0xbc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	220e      	movs	r2, #14
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff45 	bl	800346c <VL53L0X_SetVcselPulsePeriod>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000

080005f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f4:	f000 fa10 	bl	8000a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f8:	f000 f84e 	bl	8000698 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fc:	f000 f8e8 	bl	80007d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000600:	f000 f8b8 	bl	8000774 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	Dev->I2cHandle = &hi2c1;
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <main+0x90>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <main+0x94>)
 800060a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	Dev->I2cDevAddr = 0x52;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <main+0x90>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2252      	movs	r2, #82	@ 0x52
 8000614:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <main+0x98>)
 800061e:	f000 fd0b 	bl	8001038 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000622:	2014      	movs	r0, #20
 8000624:	f000 fa6a 	bl	8000afc <HAL_Delay>
	HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2108      	movs	r1, #8
 800062c:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0x98>)
 800062e:	f000 fd03 	bl	8001038 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000632:	2014      	movs	r0, #20
 8000634:	f000 fa62 	bl	8000afc <HAL_Delay>
	LidarInit();
 8000638:	f7ff ff7a 	bl	8000530 <LidarInit>
	VL53L0X_SetDeviceAddress(Dev, 0x62);
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <main+0x90>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2162      	movs	r1, #98	@ 0x62
 8000642:	4618      	mov	r0, r3
 8000644:	f002 faf3 	bl	8002c2e <VL53L0X_SetDeviceAddress>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Dev->I2cDevAddr = 0x62;
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <main+0x90>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2262      	movs	r2, #98	@ 0x62
 800064e:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
		VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <main+0x90>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	490d      	ldr	r1, [pc, #52]	@ (800068c <main+0x9c>)
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fd9d 	bl	8004198 <VL53L0X_PerformSingleRangingMeasurement>
		distanceIncms = RangingData.RangeMilliMeter/10;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <main+0x9c>)
 8000660:	891b      	ldrh	r3, [r3, #8]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <main+0xa0>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b29b      	uxth	r3, r3
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <main+0xa4>)
 8000676:	edc3 7a00 	vstr	s15, [r3]
		Dev->I2cDevAddr = 0x62;
 800067a:	bf00      	nop
 800067c:	e7e4      	b.n	8000648 <main+0x58>
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	200002e8 	.word	0x200002e8
 8000688:	40020400 	.word	0x40020400
 800068c:	2000033c 	.word	0x2000033c
 8000690:	cccccccd 	.word	0xcccccccd
 8000694:	200004e8 	.word	0x200004e8

08000698 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 faad 	bl	8007c06 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd8>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f001 ffd0 	bl	80026cc <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000732:	f000 f88f 	bl	8000854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fc84 	bl	8002060 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800075e:	f000 f879 	bl	8000854 <Error_Handler>
	}
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f000 fc5b 	bl	800106c <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007bc:	f000 f84a 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200002e8 	.word	0x200002e8
 80007c8:	40005400 	.word	0x40005400
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_GPIO_Init+0x7c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <MX_GPIO_Init+0x7c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_GPIO_Init+0x7c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_GPIO_Init+0x7c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <MX_GPIO_Init+0x7c>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_GPIO_Init+0x7c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Lidar_xshutdown_GPIO_Port, Lidar_xshutdown_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	480b      	ldr	r0, [pc, #44]	@ (8000850 <MX_GPIO_Init+0x80>)
 8000824:	f000 fc08 	bl	8001038 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Lidar_xshutdown_Pin */
	GPIO_InitStruct.Pin = Lidar_xshutdown_Pin;
 8000828:	2308      	movs	r3, #8
 800082a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Lidar_xshutdown_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_GPIO_Init+0x80>)
 8000840:	f000 fa66 	bl	8000d10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400

08000854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000874:	6453      	str	r3, [r2, #68]	@ 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fa02 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	@ (8000934 <HAL_I2C_MspInit+0x84>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12c      	bne.n	800092c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000900:	2304      	movs	r3, #4
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <HAL_I2C_MspInit+0x8c>)
 800090c:	f000 fa00 	bl	8000d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 800091a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <NMI_Handler+0x4>

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <UsageFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000996:	f000 f891 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f007 f911 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdfb 	bl	80005f0 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8000a08:	08007ccc 	.word	0x08007ccc
  ldr r2, =_sbss
 8000a0c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8000a10:	20000530 	.word	0x20000530

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f931 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff ff08 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f93b 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f911 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000008 	.word	0x20000008

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	200004ec 	.word	0x200004ec

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200004ec 	.word	0x200004ec

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff ffee 	bl	8000ae4 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffde 	bl	8000ae4 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000000c 	.word	0x2000000c

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff47 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff5c 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffb0 	bl	8000c64 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e165      	b.n	8000ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8154 	bne.w	8000ff2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80ae 	beq.w	8000ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a58      	ldr	r2, [pc, #352]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8001018 <HAL_GPIO_Init+0x308>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800101c <HAL_GPIO_Init+0x30c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x216>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8001020 <HAL_GPIO_Init+0x310>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x212>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8001024 <HAL_GPIO_Init+0x314>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8001028 <HAL_GPIO_Init+0x318>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x20a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	@ (800102c <HAL_GPIO_Init+0x31c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x206>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a49      	ldr	r2, [pc, #292]	@ (8001030 <HAL_GPIO_Init+0x320>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x202>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x21c>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a31      	ldr	r2, [pc, #196]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_GPIO_Init+0x324>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae96 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e12b      	b.n	80012d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fc0c 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2224      	movs	r2, #36	@ 0x24
 800109c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d0:	f001 f8b8 	bl	8002244 <HAL_RCC_GetPCLK1Freq>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a81      	ldr	r2, [pc, #516]	@ (80012e0 <HAL_I2C_Init+0x274>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d807      	bhi.n	80010f0 <HAL_I2C_Init+0x84>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a80      	ldr	r2, [pc, #512]	@ (80012e4 <HAL_I2C_Init+0x278>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	bf94      	ite	ls
 80010e8:	2301      	movls	r3, #1
 80010ea:	2300      	movhi	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	e006      	b.n	80010fe <HAL_I2C_Init+0x92>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a7d      	ldr	r2, [pc, #500]	@ (80012e8 <HAL_I2C_Init+0x27c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	bf94      	ite	ls
 80010f8:	2301      	movls	r3, #1
 80010fa:	2300      	movhi	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0e7      	b.n	80012d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a78      	ldr	r2, [pc, #480]	@ (80012ec <HAL_I2C_Init+0x280>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a6a      	ldr	r2, [pc, #424]	@ (80012e0 <HAL_I2C_Init+0x274>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d802      	bhi.n	8001140 <HAL_I2C_Init+0xd4>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	e009      	b.n	8001154 <HAL_I2C_Init+0xe8>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4a69      	ldr	r2, [pc, #420]	@ (80012f0 <HAL_I2C_Init+0x284>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	3301      	adds	r3, #1
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	430b      	orrs	r3, r1
 800115a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	495c      	ldr	r1, [pc, #368]	@ (80012e0 <HAL_I2C_Init+0x274>)
 8001170:	428b      	cmp	r3, r1
 8001172:	d819      	bhi.n	80011a8 <HAL_I2C_Init+0x13c>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1e59      	subs	r1, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001182:	1c59      	adds	r1, r3, #1
 8001184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001188:	400b      	ands	r3, r1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <HAL_I2C_Init+0x138>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1e59      	subs	r1, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fbb1 f3f3 	udiv	r3, r1, r3
 800119c:	3301      	adds	r3, #1
 800119e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a2:	e051      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 80011a4:	2304      	movs	r3, #4
 80011a6:	e04f      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <HAL_I2C_Init+0x168>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1e58      	subs	r0, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	440b      	add	r3, r1
 80011be:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	e012      	b.n	80011fa <HAL_I2C_Init+0x18e>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e58      	subs	r0, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	0099      	lsls	r1, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2301      	moveq	r3, #1
 80011f6:	2300      	movne	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_Init+0x196>
 80011fe:	2301      	movs	r3, #1
 8001200:	e022      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10e      	bne.n	8001228 <HAL_I2C_Init+0x1bc>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1e58      	subs	r0, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6859      	ldr	r1, [r3, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	440b      	add	r3, r1
 8001218:	fbb0 f3f3 	udiv	r3, r0, r3
 800121c:	3301      	adds	r3, #1
 800121e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001226:	e00f      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e58      	subs	r0, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	0099      	lsls	r1, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	3301      	adds	r3, #1
 8001240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	6809      	ldr	r1, [r1, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6911      	ldr	r1, [r2, #16]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68d2      	ldr	r2, [r2, #12]
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	430b      	orrs	r3, r1
 800128a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	000186a0 	.word	0x000186a0
 80012e4:	001e847f 	.word	0x001e847f
 80012e8:	003d08ff 	.word	0x003d08ff
 80012ec:	431bde83 	.word	0x431bde83
 80012f0:	10624dd3 	.word	0x10624dd3

080012f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
 8001304:	4613      	mov	r3, r2
 8001306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fbec 	bl	8000ae4 <HAL_GetTick>
 800130c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b20      	cmp	r3, #32
 8001318:	f040 80e0 	bne.w	80014dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2319      	movs	r3, #25
 8001322:	2201      	movs	r2, #1
 8001324:	4970      	ldr	r1, [pc, #448]	@ (80014e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fc64 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
 8001334:	e0d3      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_I2C_Master_Transmit+0x50>
 8001340:	2302      	movs	r3, #2
 8001342:	e0cc      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d007      	beq.n	800136a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2221      	movs	r2, #33	@ 0x21
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2210      	movs	r2, #16
 8001386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	893a      	ldrh	r2, [r7, #8]
 800139a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a50      	ldr	r2, [pc, #320]	@ (80014ec <HAL_I2C_Master_Transmit+0x1f8>)
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 face 	bl	8001954 <I2C_MasterRequestWrite>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e08d      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013d8:	e066      	b.n	80014a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fd22 	bl	8001e28 <I2C_WaitOnTXEFlagUntilTimeout>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d107      	bne.n	8001402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06b      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11b      	bne.n	800147c <HAL_I2C_Master_Transmit+0x188>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001448:	2b00      	cmp	r3, #0
 800144a:	d017      	beq.n	800147c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001466:	b29b      	uxth	r3, r3
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001474:	3b01      	subs	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	6a39      	ldr	r1, [r7, #32]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fd19 	bl	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00d      	beq.n	80014a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	2b04      	cmp	r3, #4
 8001492:	d107      	bne.n	80014a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e01a      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d194      	bne.n	80013da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2220      	movs	r2, #32
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014dc:	2302      	movs	r3, #2
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00100002 	.word	0x00100002
 80014ec:	ffff0000 	.word	0xffff0000

080014f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	461a      	mov	r2, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	817b      	strh	r3, [r7, #10]
 8001500:	4613      	mov	r3, r2
 8001502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff faee 	bl	8000ae4 <HAL_GetTick>
 8001508:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	f040 8217 	bne.w	8001946 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2319      	movs	r3, #25
 800151e:	2201      	movs	r2, #1
 8001520:	497c      	ldr	r1, [pc, #496]	@ (8001714 <HAL_I2C_Master_Receive+0x224>)
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fb66 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800152e:	2302      	movs	r3, #2
 8001530:	e20a      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_I2C_Master_Receive+0x50>
 800153c:	2302      	movs	r3, #2
 800153e:	e203      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d007      	beq.n	8001566 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2222      	movs	r2, #34	@ 0x22
 800157a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2210      	movs	r2, #16
 8001582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001718 <HAL_I2C_Master_Receive+0x228>)
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015a8:	8979      	ldrh	r1, [r7, #10]
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fa52 	bl	8001a58 <I2C_MasterRequestRead>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1c4      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	623b      	str	r3, [r7, #32]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e198      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d11b      	bne.n	800162e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e178      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001632:	2b02      	cmp	r3, #2
 8001634:	d11b      	bne.n	800166e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001644:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	e158      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800167c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001694:	e144      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169a:	2b03      	cmp	r3, #3
 800169c:	f200 80f1 	bhi.w	8001882 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d123      	bne.n	80016f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fc4b 	bl	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e145      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80016ee:	e117      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d14e      	bne.n	8001796 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fe:	2200      	movs	r2, #0
 8001700:	4906      	ldr	r1, [pc, #24]	@ (800171c <HAL_I2C_Master_Receive+0x22c>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa76 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e11a      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
 8001712:	bf00      	nop
 8001714:	00100002 	.word	0x00100002
 8001718:	ffff0000 	.word	0xffff0000
 800171c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800172e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001794:	e0c4      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	2200      	movs	r2, #0
 800179e:	496c      	ldr	r1, [pc, #432]	@ (8001950 <HAL_I2C_Master_Receive+0x460>)
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 fa27 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cb      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	2200      	movs	r2, #0
 80017fa:	4955      	ldr	r1, [pc, #340]	@ (8001950 <HAL_I2C_Master_Receive+0x460>)
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 f9f9 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e09d      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001880:	e04e      	b.n	8001920 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fb5e 	bl	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e058      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d124      	bne.n	8001920 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	f47f aeb6 	bne.w	8001696 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001946:	2302      	movs	r3, #2
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3728      	adds	r7, #40	@ 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	00010004 	.word	0x00010004

08001954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d006      	beq.n	800197e <I2C_MasterRequestWrite+0x2a>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d003      	beq.n	800197e <I2C_MasterRequestWrite+0x2a>
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800197c:	d108      	bne.n	8001990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e00b      	b.n	80019a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	2b12      	cmp	r3, #18
 8001996:	d107      	bne.n	80019a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f91d 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ce:	d103      	bne.n	80019d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e035      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019e4:	d108      	bne.n	80019f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	e01b      	b.n	8001a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019f8:	897b      	ldrh	r3, [r7, #10]
 80019fa:	11db      	asrs	r3, r3, #7
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0306 	and.w	r3, r3, #6
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f063 030f 	orn	r3, r3, #15
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <I2C_MasterRequestWrite+0xfc>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f966 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e010      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a26:	897b      	ldrh	r3, [r7, #10]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <I2C_MasterRequestWrite+0x100>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f956 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	00010008 	.word	0x00010008
 8001a54:	00010002 	.word	0x00010002

08001a58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d006      	beq.n	8001a92 <I2C_MasterRequestRead+0x3a>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <I2C_MasterRequestRead+0x3a>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a90:	d108      	bne.n	8001aa4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00b      	b.n	8001abc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	2b11      	cmp	r3, #17
 8001aaa:	d107      	bne.n	8001abc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f893 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00d      	beq.n	8001af0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ae2:	d103      	bne.n	8001aec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e079      	b.n	8001be4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001af8:	d108      	bne.n	8001b0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	e05f      	b.n	8001bcc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	11db      	asrs	r3, r3, #7
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f003 0306 	and.w	r3, r3, #6
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f063 030f 	orn	r3, r3, #15
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4930      	ldr	r1, [pc, #192]	@ (8001bec <I2C_MasterRequestRead+0x194>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f8dc 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e054      	b.n	8001be4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4929      	ldr	r1, [pc, #164]	@ (8001bf0 <I2C_MasterRequestRead+0x198>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8cc 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e044      	b.n	8001be4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f831 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00d      	beq.n	8001bb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ba6:	d103      	bne.n	8001bb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e017      	b.n	8001be4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	11db      	asrs	r3, r3, #7
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f003 0306 	and.w	r3, r3, #6
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f063 030e 	orn	r3, r3, #14
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4907      	ldr	r1, [pc, #28]	@ (8001bf0 <I2C_MasterRequestRead+0x198>)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f888 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	00010008 	.word	0x00010008
 8001bf0:	00010002 	.word	0x00010002

08001bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c04:	e048      	b.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d044      	beq.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7fe ff69 	bl	8000ae4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d139      	bne.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10d      	bne.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	e00c      	b.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d116      	bne.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e023      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10d      	bne.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	e00c      	b.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d093      	beq.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf6:	e071      	b.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d06:	d123      	bne.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e067      	b.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d041      	beq.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d58:	f7fe fec4 	bl	8000ae4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d302      	bcc.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d136      	bne.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e00b      	b.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e021      	b.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10c      	bne.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4013      	ands	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e00b      	b.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f af6d 	bne.w	8001cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e34:	e034      	b.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f8e3 	bl	8002002 <I2C_IsAcknowledgeFailed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e034      	b.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d028      	beq.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7fe fe49 	bl	8000ae4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11d      	bne.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	2b80      	cmp	r3, #128	@ 0x80
 8001e70:	d016      	beq.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b80      	cmp	r3, #128	@ 0x80
 8001eac:	d1c3      	bne.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ec4:	e034      	b.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f89b 	bl	8002002 <I2C_IsAcknowledgeFailed>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e034      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d028      	beq.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ede:	f7fe fe01 	bl	8000ae4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d302      	bcc.n	8001ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11d      	bne.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d016      	beq.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d1c3      	bne.n	8001ec6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f54:	e049      	b.n	8001fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d119      	bne.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e030      	b.n	8001ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f98:	f7fe fda4 	bl	8000ae4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d302      	bcc.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11d      	bne.n	8001fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb8:	2b40      	cmp	r3, #64	@ 0x40
 8001fba:	d016      	beq.n	8001fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e007      	b.n	8001ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b40      	cmp	r3, #64	@ 0x40
 8001ff6:	d1ae      	bne.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002018:	d11b      	bne.n	8002052 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002022:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f043 0204 	orr.w	r2, r3, #4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7fe fcc8 	bl	8000ae4 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fcc4 	bl	8000ae4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f841 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fc28 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08007ca4 	.word	0x08007ca4
 8002224:	20000004 	.word	0x20000004
 8002228:	20000008 	.word	0x20000008

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_RCC_GetHCLKFreq+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002248:	f7ff fff0 	bl	800222c <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a9b      	lsrs	r3, r3, #10
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	08007cb4 	.word	0x08007cb4

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002270:	b0ae      	sub	sp, #184	@ 0xb8
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4bcb      	ldr	r3, [pc, #812]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b0c      	cmp	r3, #12
 800229c:	f200 8206 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x440>
 80022a0:	a201      	add	r2, pc, #4	@ (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022dd 	.word	0x080022dd
 80022ac:	080026ad 	.word	0x080026ad
 80022b0:	080026ad 	.word	0x080026ad
 80022b4:	080026ad 	.word	0x080026ad
 80022b8:	080022e5 	.word	0x080022e5
 80022bc:	080026ad 	.word	0x080026ad
 80022c0:	080026ad 	.word	0x080026ad
 80022c4:	080026ad 	.word	0x080026ad
 80022c8:	080022ed 	.word	0x080022ed
 80022cc:	080026ad 	.word	0x080026ad
 80022d0:	080026ad 	.word	0x080026ad
 80022d4:	080026ad 	.word	0x080026ad
 80022d8:	080024dd 	.word	0x080024dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4bb9      	ldr	r3, [pc, #740]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022e2:	e1e7      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4bb8      	ldr	r3, [pc, #736]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ea:	e1e3      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ec:	4bb4      	ldr	r3, [pc, #720]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f8:	4bb1      	ldr	r3, [pc, #708]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d071      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002304:	4bae      	ldr	r3, [pc, #696]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002310:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800232a:	4622      	mov	r2, r4
 800232c:	462b      	mov	r3, r5
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	0159      	lsls	r1, r3, #5
 8002338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233c:	0150      	lsls	r0, r2, #5
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4621      	mov	r1, r4
 8002344:	1a51      	subs	r1, r2, r1
 8002346:	6439      	str	r1, [r7, #64]	@ 0x40
 8002348:	4629      	mov	r1, r5
 800234a:	eb63 0301 	sbc.w	r3, r3, r1
 800234e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800235c:	4649      	mov	r1, r9
 800235e:	018b      	lsls	r3, r1, #6
 8002360:	4641      	mov	r1, r8
 8002362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002366:	4641      	mov	r1, r8
 8002368:	018a      	lsls	r2, r1, #6
 800236a:	4641      	mov	r1, r8
 800236c:	1a51      	subs	r1, r2, r1
 800236e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002370:	4649      	mov	r1, r9
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002384:	4649      	mov	r1, r9
 8002386:	00cb      	lsls	r3, r1, #3
 8002388:	4641      	mov	r1, r8
 800238a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238e:	4641      	mov	r1, r8
 8002390:	00ca      	lsls	r2, r1, #3
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	4603      	mov	r3, r0
 8002398:	4622      	mov	r2, r4
 800239a:	189b      	adds	r3, r3, r2
 800239c:	633b      	str	r3, [r7, #48]	@ 0x30
 800239e:	462b      	mov	r3, r5
 80023a0:	460a      	mov	r2, r1
 80023a2:	eb42 0303 	adc.w	r3, r2, r3
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023b4:	4629      	mov	r1, r5
 80023b6:	024b      	lsls	r3, r1, #9
 80023b8:	4621      	mov	r1, r4
 80023ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023be:	4621      	mov	r1, r4
 80023c0:	024a      	lsls	r2, r1, #9
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023d8:	f7fd ff14 	bl	8000204 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023e6:	e067      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e8:	4b75      	ldr	r3, [pc, #468]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002400:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002402:	2300      	movs	r3, #0
 8002404:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002406:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800240a:	4622      	mov	r2, r4
 800240c:	462b      	mov	r3, r5
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4621      	mov	r1, r4
 8002424:	1a51      	subs	r1, r2, r1
 8002426:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002428:	4629      	mov	r1, r5
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800243c:	4649      	mov	r1, r9
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	4641      	mov	r1, r8
 8002442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002446:	4641      	mov	r1, r8
 8002448:	018a      	lsls	r2, r1, #6
 800244a:	4641      	mov	r1, r8
 800244c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002450:	4649      	mov	r1, r9
 8002452:	eb63 0b01 	sbc.w	fp, r3, r1
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002462:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246a:	4692      	mov	sl, r2
 800246c:	469b      	mov	fp, r3
 800246e:	4623      	mov	r3, r4
 8002470:	eb1a 0303 	adds.w	r3, sl, r3
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	462b      	mov	r3, r5
 8002478:	eb4b 0303 	adc.w	r3, fp, r3
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024a0:	2200      	movs	r2, #0
 80024a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80024a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024aa:	f7fd feab 	bl	8000204 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4613      	mov	r3, r2
 80024b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024b8:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80024ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024da:	e0eb      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024dc:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d06b      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	663b      	str	r3, [r7, #96]	@ 0x60
 8002508:	2300      	movs	r3, #0
 800250a:	667b      	str	r3, [r7, #100]	@ 0x64
 800250c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002510:	4622      	mov	r2, r4
 8002512:	462b      	mov	r3, r5
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	0159      	lsls	r1, r3, #5
 800251e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002522:	0150      	lsls	r0, r2, #5
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4621      	mov	r1, r4
 800252a:	1a51      	subs	r1, r2, r1
 800252c:	61b9      	str	r1, [r7, #24]
 800252e:	4629      	mov	r1, r5
 8002530:	eb63 0301 	sbc.w	r3, r3, r1
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002542:	4659      	mov	r1, fp
 8002544:	018b      	lsls	r3, r1, #6
 8002546:	4651      	mov	r1, sl
 8002548:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254c:	4651      	mov	r1, sl
 800254e:	018a      	lsls	r2, r1, #6
 8002550:	4651      	mov	r1, sl
 8002552:	ebb2 0801 	subs.w	r8, r2, r1
 8002556:	4659      	mov	r1, fp
 8002558:	eb63 0901 	sbc.w	r9, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002568:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002570:	4690      	mov	r8, r2
 8002572:	4699      	mov	r9, r3
 8002574:	4623      	mov	r3, r4
 8002576:	eb18 0303 	adds.w	r3, r8, r3
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	462b      	mov	r3, r5
 800257e:	eb49 0303 	adc.w	r3, r9, r3
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002590:	4629      	mov	r1, r5
 8002592:	024b      	lsls	r3, r1, #9
 8002594:	4621      	mov	r1, r4
 8002596:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259a:	4621      	mov	r1, r4
 800259c:	024a      	lsls	r2, r1, #9
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a6:	2200      	movs	r2, #0
 80025a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025b0:	f7fd fe28 	bl	8000204 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025be:	e065      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x420>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b3d      	ldr	r3, [pc, #244]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	4611      	mov	r1, r2
 80025d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80025de:	2300      	movs	r3, #0
 80025e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80025e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025e6:	4642      	mov	r2, r8
 80025e8:	464b      	mov	r3, r9
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4641      	mov	r1, r8
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	4649      	mov	r1, r9
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002618:	4659      	mov	r1, fp
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4651      	mov	r1, sl
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4651      	mov	r1, sl
 8002628:	1a54      	subs	r4, r2, r1
 800262a:	4659      	mov	r1, fp
 800262c:	eb63 0501 	sbc.w	r5, r3, r1
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	00eb      	lsls	r3, r5, #3
 800263a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263e:	00e2      	lsls	r2, r4, #3
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4643      	mov	r3, r8
 8002646:	18e3      	adds	r3, r4, r3
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	464b      	mov	r3, r9
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002674:	2200      	movs	r2, #0
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002678:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800267a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800267e:	f7fd fdc1 	bl	8000204 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4613      	mov	r3, r2
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0f1b      	lsrs	r3, r3, #28
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800269a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800269e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026aa:	e003      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	37b8      	adds	r7, #184	@ 0xb8
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400

080026cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e28d      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8083 	beq.w	80027f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026ec:	4b94      	ldr	r3, [pc, #592]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d019      	beq.n	800272c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026f8:	4b91      	ldr	r3, [pc, #580]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002700:	2b08      	cmp	r3, #8
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002704:	4b8e      	ldr	r3, [pc, #568]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b8b      	ldr	r3, [pc, #556]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b84      	ldr	r3, [pc, #528]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x124>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e25a      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x90>
 800274e:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7b      	ldr	r2, [pc, #492]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xcc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0xb4>
 8002766:	4b76      	ldr	r3, [pc, #472]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a72      	ldr	r2, [pc, #456]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xcc>
 8002780:	4b6f      	ldr	r3, [pc, #444]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6e      	ldr	r2, [pc, #440]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b6c      	ldr	r3, [pc, #432]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6b      	ldr	r2, [pc, #428]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe f9a0 	bl	8000ae4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe f99c 	bl	8000ae4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e21f      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b61      	ldr	r3, [pc, #388]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xdc>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe f98c 	bl	8000ae4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe f988 	bl	8000ae4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e20b      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b57      	ldr	r3, [pc, #348]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x104>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d06f      	beq.n	80028de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027fe:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800280a:	4b4d      	ldr	r3, [pc, #308]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002812:	2b08      	cmp	r3, #8
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002816:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x186>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1d3      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4937      	ldr	r1, [pc, #220]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x278>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe f935 	bl	8000ae4 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe f931 	bl	8000ae4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1b4      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4925      	ldr	r1, [pc, #148]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x278>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe f914 	bl	8000ae4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe f910 	bl	8000ae4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e193      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe f8f4 	bl	8000ae4 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe f8f0 	bl	8000ae4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e173      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x274>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x234>
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x27c>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe f8dd 	bl	8000ae4 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	e00e      	b.n	800294c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe f8d9 	bl	8000ae4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e15c      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ea      	bne.n	800292e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b83      	ldr	r3, [pc, #524]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b7c      	ldr	r3, [pc, #496]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b79      	ldr	r3, [pc, #484]	@ (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b76      	ldr	r3, [pc, #472]	@ (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a75      	ldr	r2, [pc, #468]	@ (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe f899 	bl	8000ae4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe f895 	bl	8000ae4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e118      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b6c      	ldr	r3, [pc, #432]	@ (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x31e>
 80029dc:	4b66      	ldr	r3, [pc, #408]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	4a65      	ldr	r2, [pc, #404]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x358>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x340>
 80029f2:	4b61      	ldr	r3, [pc, #388]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	4a60      	ldr	r2, [pc, #384]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	4a5d      	ldr	r2, [pc, #372]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x358>
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a59      	ldr	r2, [pc, #356]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	4b57      	ldr	r3, [pc, #348]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1c:	4a56      	ldr	r2, [pc, #344]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f85a 	bl	8000ae4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe f856 	bl	8000ae4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0d7      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCC_OscConfig+0x368>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe f844 	bl	8000ae4 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe f840 	bl	8000ae4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0c1      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	4b40      	ldr	r3, [pc, #256]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ad 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d060      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d145      	bne.n	8002b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b33      	ldr	r3, [pc, #204]	@ (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f814 	bl	8000ae4 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f810 	bl	8000ae4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e093      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	491b      	ldr	r1, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fd ffe5 	bl	8000ae4 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fd ffe1 	bl	8000ae4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e064      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x452>
 8002b3c:	e05c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fd ffce 	bl	8000ae4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fd ffca 	bl	8000ae4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04d      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x480>
 8002b6a:	e045      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e040      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <HAL_RCC_OscConfig+0x538>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d129      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d122      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d119      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 fcba 	bl	8004592 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	218a      	movs	r1, #138	@ 0x8a
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f004 feaf 	bl	80079ac <VL53L0X_WrByte>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b096      	sub	sp, #88	@ 0x58
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002c6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2188      	movs	r1, #136	@ 0x88
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f004 fe96 	bl	80079ac <VL53L0X_WrByte>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c94:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002c9e:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a9e      	ldr	r2, [pc, #632]	@ (8002f20 <VL53L0X_DataInit+0x2c0>)
 8002ca6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a9d      	ldr	r2, [pc, #628]	@ (8002f24 <VL53L0X_DataInit+0x2c4>)
 8002cae:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fac0 	bl	8003244 <VL53L0X_GetDeviceParameters>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002cca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d112      	bne.n	8002cf8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 0410 	add.w	r4, r3, #16
 8002ce0:	f107 0510 	add.w	r5, r7, #16
 8002ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2264      	movs	r2, #100	@ 0x64
 8002cfc:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8002d06:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d10:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8002d1a:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002d26:	2201      	movs	r2, #1
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f004 fe3e 	bl	80079ac <VL53L0X_WrByte>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	21ff      	movs	r1, #255	@ 0xff
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f004 fe32 	bl	80079ac <VL53L0X_WrByte>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f004 fe26 	bl	80079ac <VL53L0X_WrByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002d6e:	f107 030f 	add.w	r3, r7, #15
 8002d72:	461a      	mov	r2, r3
 8002d74:	2191      	movs	r1, #145	@ 0x91
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f004 fe9a 	bl	8007ab0 <VL53L0X_RdByte>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002d92:	2201      	movs	r2, #1
 8002d94:	2100      	movs	r1, #0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f004 fe08 	bl	80079ac <VL53L0X_WrByte>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002daa:	2200      	movs	r2, #0
 8002dac:	21ff      	movs	r1, #255	@ 0xff
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f004 fdfc 	bl	80079ac <VL53L0X_WrByte>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	@ 0x80
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f004 fdf0 	bl	80079ac <VL53L0X_WrByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dde:	e014      	b.n	8002e0a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8002de0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d114      	bne.n	8002e12 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2201      	movs	r2, #1
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fd31 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e06:	3301      	adds	r3, #1
 8002e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	dde7      	ble.n	8002de0 <VL53L0X_DataInit+0x180>
 8002e10:	e000      	b.n	8002e14 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8002e12:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002e14:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2102      	movs	r1, #2
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fd19 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e34:	2200      	movs	r2, #0
 8002e36:	2103      	movs	r1, #3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fd0d 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e44:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2104      	movs	r1, #4
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fd01 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e64:	2200      	movs	r2, #0
 8002e66:	2105      	movs	r1, #5
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fcf5 	bl	8003858 <VL53L0X_SetLimitCheckEnable>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e74:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002e7c:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fd98 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002e8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002e96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fd8b 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ea8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d108      	bne.n	8002ec2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002eb0:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd7e 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ec2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2103      	movs	r1, #3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fd72 	bl	80039b8 <VL53L0X_SetLimitCheckValue>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002eda:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	22ff      	movs	r2, #255	@ 0xff
 8002ee6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002eea:	22ff      	movs	r2, #255	@ 0xff
 8002eec:	2101      	movs	r1, #1
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f004 fd5c 	bl	80079ac <VL53L0X_WrByte>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002f02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002f12:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3758      	adds	r7, #88	@ 0x58
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00016b85 	.word	0x00016b85
 8002f24:	000970a4 	.word	0x000970a4

08002f28 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b09e      	sub	sp, #120	@ 0x78
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	2240      	movs	r2, #64	@ 0x40
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 fe61 	bl	8007c06 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002f64:	2101      	movs	r1, #1
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f002 fa69 	bl	800543e <VL53L0X_get_info_from_device>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8002f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002f84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d80d      	bhi.n	8002fa8 <VL53L0X_StaticInit+0x80>
 8002f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d806      	bhi.n	8002fa8 <VL53L0X_StaticInit+0x80>
 8002f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d90b      	bls.n	8002fc0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002fa8:	f107 0218 	add.w	r2, r7, #24
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f001 fce8 	bl	8004988 <VL53L0X_perform_ref_spad_management>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8002fbe:	e009      	b.n	8002fd4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f001 fee9 	bl	8004da0 <VL53L0X_set_reference_spads>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002fd4:	4b93      	ldr	r3, [pc, #588]	@ (8003224 <VL53L0X_StaticInit+0x2fc>)
 8002fd6:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002fd8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10f      	bne.n	8003000 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8002fe6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002fea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ffa:	e001      	b.n	8003000 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002ffc:	4b89      	ldr	r3, [pc, #548]	@ (8003224 <VL53L0X_StaticInit+0x2fc>)
 8002ffe:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003000:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003008:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f003 fdb8 	bl	8006b80 <VL53L0X_load_tuning_settings>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003016:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2304      	movs	r3, #4
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f001 f8e5 	bl	80041f8 <VL53L0X_SetGpioConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003034:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003038:	2b00      	cmp	r3, #0
 800303a:	d121      	bne.n	8003080 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800303c:	2201      	movs	r2, #1
 800303e:	21ff      	movs	r1, #255	@ 0xff
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f004 fcb3 	bl	80079ac <VL53L0X_WrByte>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800304c:	f107 031a 	add.w	r3, r7, #26
 8003050:	461a      	mov	r2, r3
 8003052:	2184      	movs	r1, #132	@ 0x84
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f004 fd55 	bl	8007b04 <VL53L0X_RdWord>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003062:	4313      	orrs	r3, r2
 8003064:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003068:	2200      	movs	r2, #0
 800306a:	21ff      	movs	r1, #255	@ 0xff
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f004 fc9d 	bl	80079ac <VL53L0X_WrByte>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800307a:	4313      	orrs	r3, r2
 800307c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003080:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003088:	8b7b      	ldrh	r3, [r7, #26]
 800308a:	011a      	lsls	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003092:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8cf 	bl	8003244 <VL53L0X_GetDeviceParameters>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80030ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d110      	bne.n	80030d6 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80030b4:	f107 0319 	add.w	r3, r7, #25
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f991 	bl	80033e2 <VL53L0X_GetFractionEnable>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80030c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80030ce:	7e7a      	ldrb	r2, [r7, #25]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80030d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0410 	add.w	r4, r3, #16
 80030e4:	f107 051c 	add.w	r5, r7, #28
 80030e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80030fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8003104:	f107 0319 	add.w	r3, r7, #25
 8003108:	461a      	mov	r2, r3
 800310a:	2101      	movs	r1, #1
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f004 fccf 	bl	8007ab0 <VL53L0X_RdByte>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003118:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003120:	7e7a      	ldrb	r2, [r7, #25]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003128:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f9c9 	bl	80034cc <VL53L0X_SetSequenceStepEnable>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003140:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003148:	2200      	movs	r2, #0
 800314a:	2102      	movs	r1, #2
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f9bd 	bl	80034cc <VL53L0X_SetSequenceStepEnable>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003158:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003168:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003170:	f107 0313 	add.w	r3, r7, #19
 8003174:	461a      	mov	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f98f 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003184:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800318c:	7cfa      	ldrb	r2, [r7, #19]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003194:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 800319c:	f107 0313 	add.w	r3, r7, #19
 80031a0:	461a      	mov	r2, r3
 80031a2:	2101      	movs	r1, #1
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f979 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80031b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031b8:	7cfa      	ldrb	r2, [r7, #19]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80031c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	461a      	mov	r2, r3
 80031ce:	2103      	movs	r1, #3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f002 feb3 	bl	8005f3c <get_sequence_step_timeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80031dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80031ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	461a      	mov	r2, r3
 80031fa:	2104      	movs	r1, #4
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f002 fe9d 	bl	8005f3c <get_sequence_step_timeout>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003208:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003218:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800321c:	4618      	mov	r0, r3
 800321e:	3770      	adds	r7, #112	@ 0x70
 8003220:	46bd      	mov	sp, r7
 8003222:	bdb0      	pop	{r4, r5, r7, pc}
 8003224:	20000010 	.word	0x20000010

08003228 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003230:	239d      	movs	r3, #157	@ 0x9d
 8003232:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8b0 	bl	80033bc <VL53L0X_GetDeviceMode>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	3308      	adds	r3, #8
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa76 	bl	8003760 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003274:	4603      	mov	r3, r0
 8003276:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	3310      	adds	r3, #16
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 faac 	bl	80037f2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fcab 	bl	8002c08 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80032b2:	4603      	mov	r3, r0
 80032b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d134      	bne.n	8003328 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	e02a      	b.n	800331a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d12a      	bne.n	8003322 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	b299      	uxth	r1, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	3308      	adds	r3, #8
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	461a      	mov	r2, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fbcc 	bl	8003a7c <VL53L0X_GetLimitCheckValue>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d117      	bne.n	8003326 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	b299      	uxth	r1, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3318      	adds	r3, #24
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	4413      	add	r3, r2
 8003302:	461a      	mov	r2, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb33 	bl	8003970 <VL53L0X_GetLimitCheckEnable>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	4313      	orrs	r3, r2
 8003312:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3301      	adds	r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b05      	cmp	r3, #5
 800331e:	ddd1      	ble.n	80032c4 <VL53L0X_GetDeviceParameters+0x80>
 8003320:	e002      	b.n	8003328 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003326:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	333c      	adds	r3, #60	@ 0x3c
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fc2e 	bl	8003b98 <VL53L0X_GetWrapAroundCheckEnable>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f879 	bl	8003446 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	2b15      	cmp	r3, #21
 8003378:	bf8c      	ite	hi
 800337a:	2201      	movhi	r2, #1
 800337c:	2200      	movls	r2, #0
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	2a00      	cmp	r2, #0
 8003382:	d10f      	bne.n	80033a4 <VL53L0X_SetDeviceMode+0x40>
 8003384:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <VL53L0X_SetDeviceMode+0x54>)
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	741a      	strb	r2, [r3, #16]
		break;
 80033a2:	e001      	b.n	80033a8 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80033a4:	23f8      	movs	r3, #248	@ 0xf8
 80033a6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	0030000b 	.word	0x0030000b

080033bc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7c1a      	ldrb	r2, [r3, #16]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	2109      	movs	r1, #9
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 fb5b 	bl	8007ab0 <VL53L0X_RdByte>
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f003 fa13 	bl	800685c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f003 fae0 	bl	8006a1c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003480:	78ba      	ldrb	r2, [r7, #2]
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f002 ff2a 	bl	80062e0 <VL53L0X_set_vcsel_pulse_period>
 800348c:	4603      	mov	r3, r0
 800348e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	460b      	mov	r3, r1
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80034ae:	7afb      	ldrb	r3, [r7, #11]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4619      	mov	r1, r3
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f003 f99a 	bl	80067ee <VL53L0X_get_vcsel_pulse_period>
 80034ba:	4603      	mov	r3, r0
 80034bc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80034be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
 80034d8:	4613      	mov	r3, r2
 80034da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034dc:	2300      	movs	r3, #0
 80034de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034e8:	f107 030f 	add.w	r3, r7, #15
 80034ec:	461a      	mov	r2, r3
 80034ee:	2101      	movs	r1, #1
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f004 fadd 	bl	8007ab0 <VL53L0X_RdByte>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80034fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d159      	bne.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003506:	78bb      	ldrb	r3, [r7, #2]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d12b      	bne.n	8003564 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d825      	bhi.n	800355e <VL53L0X_SetSequenceStepEnable+0x92>
 8003512:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800352d 	.word	0x0800352d
 800351c:	08003537 	.word	0x08003537
 8003520:	08003541 	.word	0x08003541
 8003524:	0800354b 	.word	0x0800354b
 8003528:	08003555 	.word	0x08003555
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800352c:	7dbb      	ldrb	r3, [r7, #22]
 800352e:	f043 0310 	orr.w	r3, r3, #16
 8003532:	75bb      	strb	r3, [r7, #22]
				break;
 8003534:	e041      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003536:	7dbb      	ldrb	r3, [r7, #22]
 8003538:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800353c:	75bb      	strb	r3, [r7, #22]
				break;
 800353e:	e03c      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003540:	7dbb      	ldrb	r3, [r7, #22]
 8003542:	f043 0304 	orr.w	r3, r3, #4
 8003546:	75bb      	strb	r3, [r7, #22]
				break;
 8003548:	e037      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800354a:	7dbb      	ldrb	r3, [r7, #22]
 800354c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003550:	75bb      	strb	r3, [r7, #22]
				break;
 8003552:	e032      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003554:	7dbb      	ldrb	r3, [r7, #22]
 8003556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800355a:	75bb      	strb	r3, [r7, #22]
				break;
 800355c:	e02d      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800355e:	23fc      	movs	r3, #252	@ 0xfc
 8003560:	75fb      	strb	r3, [r7, #23]
 8003562:	e02a      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d825      	bhi.n	80035b6 <VL53L0X_SetSequenceStepEnable+0xea>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003585 	.word	0x08003585
 8003574:	0800358f 	.word	0x0800358f
 8003578:	08003599 	.word	0x08003599
 800357c:	080035a3 	.word	0x080035a3
 8003580:	080035ad 	.word	0x080035ad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003584:	7dbb      	ldrb	r3, [r7, #22]
 8003586:	f023 0310 	bic.w	r3, r3, #16
 800358a:	75bb      	strb	r3, [r7, #22]
				break;
 800358c:	e015      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800358e:	7dbb      	ldrb	r3, [r7, #22]
 8003590:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8003594:	75bb      	strb	r3, [r7, #22]
				break;
 8003596:	e010      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003598:	7dbb      	ldrb	r3, [r7, #22]
 800359a:	f023 0304 	bic.w	r3, r3, #4
 800359e:	75bb      	strb	r3, [r7, #22]
				break;
 80035a0:	e00b      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80035a2:	7dbb      	ldrb	r3, [r7, #22]
 80035a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a8:	75bb      	strb	r3, [r7, #22]
				break;
 80035aa:	e006      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80035ac:	7dbb      	ldrb	r3, [r7, #22]
 80035ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035b2:	75bb      	strb	r3, [r7, #22]
				break;
 80035b4:	e001      	b.n	80035ba <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80035b6:	23fc      	movs	r3, #252	@ 0xfc
 80035b8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	7dba      	ldrb	r2, [r7, #22]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d01e      	beq.n	8003600 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80035c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80035ca:	7dbb      	ldrb	r3, [r7, #22]
 80035cc:	461a      	mov	r2, r3
 80035ce:	2101      	movs	r1, #1
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f004 f9eb 	bl	80079ac <VL53L0X_WrByte>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80035da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7dba      	ldrb	r2, [r7, #22]
 80035e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80035ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80035f8:	6939      	ldr	r1, [r7, #16]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff10 	bl	8003420 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	72fb      	strb	r3, [r7, #11]
 800361a:	4613      	mov	r3, r2
 800361c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d836      	bhi.n	800369c <sequence_step_enabled+0x90>
 800362e:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <sequence_step_enabled+0x28>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003649 	.word	0x08003649
 8003638:	0800365b 	.word	0x0800365b
 800363c:	0800366d 	.word	0x0800366d
 8003640:	0800367f 	.word	0x0800367f
 8003644:	08003691 	.word	0x08003691
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003648:	7abb      	ldrb	r3, [r7, #10]
 800364a:	111b      	asrs	r3, r3, #4
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	701a      	strb	r2, [r3, #0]
		break;
 8003658:	e022      	b.n	80036a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800365a:	7abb      	ldrb	r3, [r7, #10]
 800365c:	10db      	asrs	r3, r3, #3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	701a      	strb	r2, [r3, #0]
		break;
 800366a:	e019      	b.n	80036a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800366c:	7abb      	ldrb	r3, [r7, #10]
 800366e:	109b      	asrs	r3, r3, #2
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	701a      	strb	r2, [r3, #0]
		break;
 800367c:	e010      	b.n	80036a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800367e:	7abb      	ldrb	r3, [r7, #10]
 8003680:	119b      	asrs	r3, r3, #6
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	b2da      	uxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	701a      	strb	r2, [r3, #0]
		break;
 800368e:	e007      	b.n	80036a0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003690:	7abb      	ldrb	r3, [r7, #10]
 8003692:	09db      	lsrs	r3, r3, #7
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]
		break;
 800369a:	e001      	b.n	80036a0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800369c:	23fc      	movs	r3, #252	@ 0xfc
 800369e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80036c2:	f107 030e 	add.w	r3, r7, #14
 80036c6:	461a      	mov	r2, r3
 80036c8:	2101      	movs	r1, #1
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f004 f9f0 	bl	8007ab0 <VL53L0X_RdByte>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80036dc:	7bba      	ldrb	r2, [r7, #14]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff92 	bl	800360c <sequence_step_enabled>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80036f4:	7bba      	ldrb	r2, [r7, #14]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	3302      	adds	r3, #2
 80036fa:	2101      	movs	r1, #1
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff85 	bl	800360c <sequence_step_enabled>
 8003702:	4603      	mov	r3, r0
 8003704:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800370e:	7bba      	ldrb	r2, [r7, #14]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	2102      	movs	r1, #2
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff78 	bl	800360c <sequence_step_enabled>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003728:	7bba      	ldrb	r2, [r7, #14]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3303      	adds	r3, #3
 800372e:	2103      	movs	r1, #3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ff6b 	bl	800360c <sequence_step_enabled>
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003742:	7bba      	ldrb	r2, [r7, #14]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3304      	adds	r3, #4
 8003748:	2104      	movs	r1, #4
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff5e 	bl	800360c <sequence_step_enabled>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	461a      	mov	r2, r3
 8003774:	21f8      	movs	r1, #248	@ 0xf8
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f004 f9c4 	bl	8007b04 <VL53L0X_RdWord>
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	461a      	mov	r2, r3
 800378e:	2104      	movs	r1, #4
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f004 f9ed 	bl	8007b70 <VL53L0X_RdDWord>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80037a2:	89bb      	ldrh	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	89ba      	ldrh	r2, [r7, #12]
 80037ac:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7f1b      	ldrb	r3, [r3, #28]
 80037da:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	7bba      	ldrb	r2, [r7, #14]
 80037e0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003800:	f107 030e 	add.w	r3, r7, #14
 8003804:	461a      	mov	r2, r3
 8003806:	2120      	movs	r1, #32
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 f97b 	bl	8007b04 <VL53L0X_RdWord>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8003812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800381a:	89fb      	ldrh	r3, [r7, #14]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	771a      	strb	r2, [r3, #28]
 8003832:	e00b      	b.n	800384c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003834:	89fb      	ldrh	r3, [r7, #14]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800384c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d902      	bls.n	8003884 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800387e:	23fc      	movs	r3, #252	@ 0xfc
 8003880:	75fb      	strb	r3, [r7, #23]
 8003882:	e05b      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	73bb      	strb	r3, [r7, #14]
 8003896:	e00a      	b.n	80038ae <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	330c      	adds	r3, #12
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d841      	bhi.n	8003938 <VL53L0X_SetLimitCheckEnable+0xe0>
 80038b4:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <VL53L0X_SetLimitCheckEnable+0x64>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	080038df 	.word	0x080038df
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038ff 	.word	0x080038ff
 80038cc:	08003909 	.word	0x08003909
 80038d0:	08003921 	.word	0x08003921

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80038dc:	e02e      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	2144      	movs	r1, #68	@ 0x44
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f004 f883 	bl	80079f4 <VL53L0X_WrWord>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]

			break;
 80038f2:	e023      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80038fc:	e01e      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003906:	e019      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800390e:	7b7b      	ldrb	r3, [r7, #13]
 8003910:	22fe      	movs	r2, #254	@ 0xfe
 8003912:	2160      	movs	r1, #96	@ 0x60
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f004 f897 	bl	8007a48 <VL53L0X_UpdateByte>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800391e:	e00d      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003926:	7b7b      	ldrb	r3, [r7, #13]
 8003928:	22ef      	movs	r2, #239	@ 0xef
 800392a:	2160      	movs	r1, #96	@ 0x60
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f004 f88b 	bl	8007a48 <VL53L0X_UpdateByte>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003936:	e001      	b.n	800393c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003938:	23fc      	movs	r3, #252	@ 0xfc
 800393a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800393c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003956:	e005      	b.n	8003964 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	460b      	mov	r3, r1
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d905      	bls.n	8003994 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003988:	23fc      	movs	r3, #252	@ 0xfc
 800398a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e008      	b.n	80039a6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003994:	897b      	ldrh	r3, [r7, #10]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800399e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7dba      	ldrb	r2, [r7, #22]
 80039a4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	460b      	mov	r3, r1
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039d4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80039d6:	7dbb      	ldrb	r3, [r7, #22]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80039dc:	897b      	ldrh	r3, [r7, #10]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	330c      	adds	r3, #12
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	e040      	b.n	8003a6e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80039ec:	897b      	ldrh	r3, [r7, #10]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d830      	bhi.n	8003a54 <VL53L0X_SetLimitCheckValue+0x9c>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <VL53L0X_SetLimitCheckValue+0x40>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a11 	.word	0x08003a11
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	08003a2f 	.word	0x08003a2f
 8003a04:	08003a37 	.word	0x08003a37
 8003a08:	08003a3f 	.word	0x08003a3f
 8003a0c:	08003a3f 	.word	0x08003a3f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003a16:	e01f      	b.n	8003a58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2144      	movs	r1, #68	@ 0x44
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f003 ffe6 	bl	80079f4 <VL53L0X_WrWord>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003a2c:	e014      	b.n	8003a58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003a34:	e010      	b.n	8003a58 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003a3c:	e00c      	b.n	8003a58 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	2164      	movs	r1, #100	@ 0x64
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f003 ffd3 	bl	80079f4 <VL53L0X_WrWord>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003a52:	e001      	b.n	8003a58 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003a54:	23fc      	movs	r3, #252	@ 0xfc
 8003a56:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	330c      	adds	r3, #12
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop

08003a7c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	460b      	mov	r3, r1
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d847      	bhi.n	8003b28 <VL53L0X_GetLimitCheckValue+0xac>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <VL53L0X_GetLimitCheckValue+0x24>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003ac5 	.word	0x08003ac5
 8003aa8:	08003aeb 	.word	0x08003aeb
 8003aac:	08003af7 	.word	0x08003af7
 8003ab0:	08003b03 	.word	0x08003b03
 8003ab4:	08003b03 	.word	0x08003b03

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	77bb      	strb	r3, [r7, #30]
		break;
 8003ac2:	e033      	b.n	8003b2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003ac4:	f107 0316 	add.w	r3, r7, #22
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2144      	movs	r1, #68	@ 0x44
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f004 f819 	bl	8007b04 <VL53L0X_RdWord>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	025b      	lsls	r3, r3, #9
 8003ae2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77bb      	strb	r3, [r7, #30]
		break;
 8003ae8:	e020      	b.n	8003b2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77bb      	strb	r3, [r7, #30]
		break;
 8003af4:	e01a      	b.n	8003b2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	77bb      	strb	r3, [r7, #30]
		break;
 8003b00:	e014      	b.n	8003b2c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003b02:	f107 0316 	add.w	r3, r7, #22
 8003b06:	461a      	mov	r2, r3
 8003b08:	2164      	movs	r1, #100	@ 0x64
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f003 fffa 	bl	8007b04 <VL53L0X_RdWord>
 8003b10:	4603      	mov	r3, r0
 8003b12:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003b1c:	8afb      	ldrh	r3, [r7, #22]
 8003b1e:	025b      	lsls	r3, r3, #9
 8003b20:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	77bb      	strb	r3, [r7, #30]
		break;
 8003b26:	e001      	b.n	8003b2c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b28:	23fc      	movs	r3, #252	@ 0xfc
 8003b2a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d12a      	bne.n	8003b8a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003b34:	7fbb      	ldrb	r3, [r7, #30]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d124      	bne.n	8003b84 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d110      	bne.n	8003b62 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	330c      	adds	r3, #12
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003b60:	e013      	b.n	8003b8a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003b68:	897b      	ldrh	r3, [r7, #10]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003b82:	e002      	b.n	8003b8a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b8a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop

08003b98 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003ba6:	f107 030e 	add.w	r3, r7, #14
 8003baa:	461a      	mov	r2, r3
 8003bac:	2101      	movs	r1, #1
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f003 ff7e 	bl	8007ab0 <VL53L0X_RdByte>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10e      	bne.n	8003bde <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003bc0:	7bba      	ldrb	r2, [r7, #14]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8003bc8:	7bbb      	ldrb	r3, [r7, #14]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da03      	bge.n	8003bd8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003c08:	f107 030e 	add.w	r3, r7, #14
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fbd4 	bl	80033bc <VL53L0X_GetDeviceMode>
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f898 	bl	8003d5c <VL53L0X_StartMeasurement>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 fb33 	bl	80052a4 <VL53L0X_measurement_poll_for_completion>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003c4a:	7bbb      	ldrb	r3, [r7, #14]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003c74:	2301      	movs	r3, #1
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fad5 	bl	800522a <VL53L0X_perform_ref_calibration>
 8003c80:	4603      	mov	r3, r0
 8003c82:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8003ca6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003ca8:	7dbb      	ldrb	r3, [r7, #22]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d005      	beq.n	8003cba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003cae:	7dbb      	ldrb	r3, [r7, #22]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d002      	beq.n	8003cba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003cb4:	7dbb      	ldrb	r3, [r7, #22]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d147      	bne.n	8003d4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	f107 0210 	add.w	r2, r7, #16
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fbb9 	bl	800443c <VL53L0X_GetInterruptThresholds>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003cd4:	d803      	bhi.n	8003cde <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003cd6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003cd8:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003cdc:	d935      	bls.n	8003d4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d131      	bne.n	8003d4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003cec:	491a      	ldr	r1, [pc, #104]	@ (8003d58 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f002 ff46 	bl	8006b80 <VL53L0X_load_tuning_settings>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75fb      	strb	r3, [r7, #23]
 8003cf8:	e027      	b.n	8003d4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	21ff      	movs	r1, #255	@ 0xff
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f003 fe54 	bl	80079ac <VL53L0X_WrByte>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2170      	movs	r1, #112	@ 0x70
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f003 fe4a 	bl	80079ac <VL53L0X_WrByte>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d22:	2200      	movs	r2, #0
 8003d24:	21ff      	movs	r1, #255	@ 0xff
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f003 fe40 	bl	80079ac <VL53L0X_WrByte>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f003 fe36 	bl	80079ac <VL53L0X_WrByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000104 	.word	0x20000104

08003d5c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003d6c:	f107 030e 	add.w	r3, r7, #14
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fb22 	bl	80033bc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	2180      	movs	r1, #128	@ 0x80
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f003 fe15 	bl	80079ac <VL53L0X_WrByte>
 8003d82:	4603      	mov	r3, r0
 8003d84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d86:	2201      	movs	r2, #1
 8003d88:	21ff      	movs	r1, #255	@ 0xff
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f003 fe0e 	bl	80079ac <VL53L0X_WrByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f003 fe07 	bl	80079ac <VL53L0X_WrByte>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8003da8:	461a      	mov	r2, r3
 8003daa:	2191      	movs	r1, #145	@ 0x91
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f003 fdfd 	bl	80079ac <VL53L0X_WrByte>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003db6:	2201      	movs	r2, #1
 8003db8:	2100      	movs	r1, #0
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f003 fdf6 	bl	80079ac <VL53L0X_WrByte>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	21ff      	movs	r1, #255	@ 0xff
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f003 fdef 	bl	80079ac <VL53L0X_WrByte>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f003 fde8 	bl	80079ac <VL53L0X_WrByte>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003de0:	7bbb      	ldrb	r3, [r7, #14]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d054      	beq.n	8003e90 <VL53L0X_StartMeasurement+0x134>
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	dc6c      	bgt.n	8003ec4 <VL53L0X_StartMeasurement+0x168>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <VL53L0X_StartMeasurement+0x98>
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d034      	beq.n	8003e5c <VL53L0X_StartMeasurement+0x100>
 8003df2:	e067      	b.n	8003ec4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003df4:	2201      	movs	r2, #1
 8003df6:	2100      	movs	r1, #0
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f003 fdd7 	bl	80079ac <VL53L0X_WrByte>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15d      	bne.n	8003eca <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003e18:	f107 030d 	add.w	r3, r7, #13
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f003 fe45 	bl	8007ab0 <VL53L0X_RdByte>
 8003e26:	4603      	mov	r3, r0
 8003e28:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003e30:	7b7a      	ldrb	r2, [r7, #13]
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003e4c:	d3e1      	bcc.n	8003e12 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003e54:	d339      	bcc.n	8003eca <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003e56:	23f9      	movs	r3, #249	@ 0xf9
 8003e58:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003e5a:	e036      	b.n	8003eca <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e64:	2101      	movs	r1, #1
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff12 	bl	8003c90 <VL53L0X_CheckAndLoadInterruptSettings>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e70:	2202      	movs	r2, #2
 8003e72:	2100      	movs	r1, #0
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f003 fd99 	bl	80079ac <VL53L0X_WrByte>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d123      	bne.n	8003ece <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8003e8e:	e01e      	b.n	8003ece <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e98:	2101      	movs	r1, #1
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fef8 	bl	8003c90 <VL53L0X_CheckAndLoadInterruptSettings>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f003 fd7f 	bl	80079ac <VL53L0X_WrByte>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8003ec2:	e006      	b.n	8003ed2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003ec4:	23f8      	movs	r3, #248	@ 0xf8
 8003ec6:	75fb      	strb	r3, [r7, #23]
 8003ec8:	e004      	b.n	8003ed4 <VL53L0X_StartMeasurement+0x178>
		break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <VL53L0X_StartMeasurement+0x178>
		break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <VL53L0X_StartMeasurement+0x178>
		break;
 8003ed2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8003ef4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003ef6:	7bbb      	ldrb	r3, [r7, #14]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d112      	bne.n	8003f22 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fb0e 	bl	8004524 <VL53L0X_GetInterruptMaskStatus>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d103      	bne.n	8003f1a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e01c      	b.n	8003f54 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e018      	b.n	8003f54 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003f22:	f107 030d 	add.w	r3, r7, #13
 8003f26:	461a      	mov	r2, r3
 8003f28:	2114      	movs	r1, #20
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f003 fdc0 	bl	8007ab0 <VL53L0X_RdByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003f3c:	7b7b      	ldrb	r3, [r7, #13]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e002      	b.n	8003f54 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b096      	sub	sp, #88	@ 0x58
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003f70:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003f74:	230c      	movs	r3, #12
 8003f76:	2114      	movs	r1, #20
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f003 fceb 	bl	8007954 <VL53L0X_ReadMulti>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003f84:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f040 80c8 	bne.w	800411e <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003f9a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fca:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003fcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003fd8:	4413      	add	r3, r2
 8003fda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003fde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003fe2:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003fe8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004000:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004002:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004006:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8004010:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004018:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800401c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800401e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004022:	d046      	beq.n	80040b2 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004024:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004026:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004032:	4a58      	ldr	r2, [pc, #352]	@ (8004194 <VL53L0X_GetRangingMeasurementData+0x234>)
 8004034:	fb82 1203 	smull	r1, r2, r2, r3
 8004038:	1192      	asrs	r2, r2, #6
 800403a:	17db      	asrs	r3, r3, #31
 800403c:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800403e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f1b      	ldrb	r3, [r3, #28]
 800404c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004050:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02c      	beq.n	80040b2 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004058:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800405a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8004066:	429a      	cmp	r2, r3
 8004068:	d10d      	bne.n	8004086 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800406a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8004072:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004076:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800407a:	e016      	b.n	80040aa <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800407c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004080:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004084:	e011      	b.n	80040aa <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004086:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800408a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408c:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004090:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004092:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004096:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800409a:	121b      	asrs	r3, r3, #8
 800409c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800409e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80040a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80040aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80040b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80040ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80040c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	75da      	strb	r2, [r3, #23]
 80040d4:	e006      	b.n	80040e4 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80040dc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2200      	movs	r2, #0
 80040e2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80040e4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80040e8:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80040ec:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f003 f9de 	bl	80074bc <VL53L0X_get_pal_range_status>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004108:	4313      	orrs	r3, r2
 800410a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800410e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004116:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800411e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004122:	2b00      	cmp	r3, #0
 8004124:	d12f      	bne.n	8004186 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f107 040c 	add.w	r4, r7, #12
 800412c:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8004130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004134:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004138:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004140:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800414e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004154:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800415a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004160:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004166:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800416c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8004176:	f107 050c 	add.w	r5, r7, #12
 800417a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004186:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800418a:	4618      	mov	r0, r3
 800418c:	3750      	adds	r7, #80	@ 0x50
 800418e:	46bd      	mov	sp, r7
 8004190:	bdb0      	pop	{r4, r5, r7, pc}
 8004192:	bf00      	nop
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80041a6:	2100      	movs	r1, #0
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff f8db 	bl	8003364 <VL53L0X_SetDeviceMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80041b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fd1e 	bl	8003bfc <VL53L0X_PerformSingleMeasurement>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80041c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fec6 	bl	8003f60 <VL53L0X_GetRangingMeasurementData>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80041d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80041e0:	2100      	movs	r1, #0
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f95e 	bl	80044a4 <VL53L0X_ClearInterruptMask>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80041ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	70fb      	strb	r3, [r7, #3]
 800420a:	460b      	mov	r3, r1
 800420c:	70bb      	strb	r3, [r7, #2]
 800420e:	4613      	mov	r3, r2
 8004210:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800421c:	23f6      	movs	r3, #246	@ 0xf6
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e105      	b.n	800442e <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	2b14      	cmp	r3, #20
 8004226:	d110      	bne.n	800424a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004228:	7e3b      	ldrb	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800422e:	2310      	movs	r3, #16
 8004230:	73bb      	strb	r3, [r7, #14]
 8004232:	e001      	b.n	8004238 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004234:	2301      	movs	r3, #1
 8004236:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	461a      	mov	r2, r3
 800423c:	2184      	movs	r1, #132	@ 0x84
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f003 fbb4 	bl	80079ac <VL53L0X_WrByte>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e0f1      	b.n	800442e <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800424a:	78bb      	ldrb	r3, [r7, #2]
 800424c:	2b15      	cmp	r3, #21
 800424e:	f040 8097 	bne.w	8004380 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004252:	2201      	movs	r2, #1
 8004254:	21ff      	movs	r1, #255	@ 0xff
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f003 fba8 	bl	80079ac <VL53L0X_WrByte>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4313      	orrs	r3, r2
 8004264:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f003 fb9e 	bl	80079ac <VL53L0X_WrByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4313      	orrs	r3, r2
 8004278:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800427a:	2200      	movs	r2, #0
 800427c:	21ff      	movs	r1, #255	@ 0xff
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f003 fb94 	bl	80079ac <VL53L0X_WrByte>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	4313      	orrs	r3, r2
 800428c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800428e:	2201      	movs	r2, #1
 8004290:	2180      	movs	r1, #128	@ 0x80
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f003 fb8a 	bl	80079ac <VL53L0X_WrByte>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4313      	orrs	r3, r2
 80042a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80042a2:	2202      	movs	r2, #2
 80042a4:	2185      	movs	r1, #133	@ 0x85
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f003 fb80 	bl	80079ac <VL53L0X_WrByte>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80042b6:	2204      	movs	r2, #4
 80042b8:	21ff      	movs	r1, #255	@ 0xff
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f003 fb76 	bl	80079ac <VL53L0X_WrByte>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80042ca:	2200      	movs	r2, #0
 80042cc:	21cd      	movs	r1, #205	@ 0xcd
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f003 fb6c 	bl	80079ac <VL53L0X_WrByte>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4313      	orrs	r3, r2
 80042dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80042de:	2211      	movs	r2, #17
 80042e0:	21cc      	movs	r1, #204	@ 0xcc
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f003 fb62 	bl	80079ac <VL53L0X_WrByte>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80042f2:	2207      	movs	r2, #7
 80042f4:	21ff      	movs	r1, #255	@ 0xff
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f003 fb58 	bl	80079ac <VL53L0X_WrByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4313      	orrs	r3, r2
 8004304:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004306:	2200      	movs	r2, #0
 8004308:	21be      	movs	r1, #190	@ 0xbe
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f003 fb4e 	bl	80079ac <VL53L0X_WrByte>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	4313      	orrs	r3, r2
 8004318:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800431a:	2206      	movs	r2, #6
 800431c:	21ff      	movs	r1, #255	@ 0xff
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f003 fb44 	bl	80079ac <VL53L0X_WrByte>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	4313      	orrs	r3, r2
 800432c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800432e:	2209      	movs	r2, #9
 8004330:	21cc      	movs	r1, #204	@ 0xcc
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f003 fb3a 	bl	80079ac <VL53L0X_WrByte>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	4313      	orrs	r3, r2
 8004340:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004342:	2200      	movs	r2, #0
 8004344:	21ff      	movs	r1, #255	@ 0xff
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f003 fb30 	bl	80079ac <VL53L0X_WrByte>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	4313      	orrs	r3, r2
 8004354:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004356:	2201      	movs	r2, #1
 8004358:	21ff      	movs	r1, #255	@ 0xff
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f003 fb26 	bl	80079ac <VL53L0X_WrByte>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4313      	orrs	r3, r2
 8004368:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f003 fb1c 	bl	80079ac <VL53L0X_WrByte>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	4313      	orrs	r3, r2
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e056      	b.n	800442e <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d120      	bne.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d81b      	bhi.n	80043c6 <VL53L0X_SetGpioConfig+0x1ce>
 800438e:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <VL53L0X_SetGpioConfig+0x19c>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a9 	.word	0x080043a9
 8004398:	080043af 	.word	0x080043af
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043bb 	.word	0x080043bb
 80043a4:	080043c1 	.word	0x080043c1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73bb      	strb	r3, [r7, #14]
				break;
 80043ac:	e00d      	b.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73bb      	strb	r3, [r7, #14]
				break;
 80043b2:	e00a      	b.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80043b4:	2302      	movs	r3, #2
 80043b6:	73bb      	strb	r3, [r7, #14]
				break;
 80043b8:	e007      	b.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73bb      	strb	r3, [r7, #14]
				break;
 80043be:	e004      	b.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80043c0:	2304      	movs	r3, #4
 80043c2:	73bb      	strb	r3, [r7, #14]
				break;
 80043c4:	e001      	b.n	80043ca <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 80043c6:	23f5      	movs	r3, #245	@ 0xf5
 80043c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 80043d2:	7bbb      	ldrb	r3, [r7, #14]
 80043d4:	461a      	mov	r2, r3
 80043d6:	210a      	movs	r1, #10
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f003 fae7 	bl	80079ac <VL53L0X_WrByte>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80043ea:	7e3b      	ldrb	r3, [r7, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	73bb      	strb	r3, [r7, #14]
 80043f4:	e001      	b.n	80043fa <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80043f6:	2310      	movs	r3, #16
 80043f8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	22ef      	movs	r2, #239	@ 0xef
 80043fe:	2184      	movs	r1, #132	@ 0x84
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f003 fb21 	bl	8007a48 <VL53L0X_UpdateByte>
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	787a      	ldrb	r2, [r7, #1]
 8004416:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004422:	2100      	movs	r1, #0
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f83d 	bl	80044a4 <VL53L0X_ClearInterruptMask>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800442e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop

0800443c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	460b      	mov	r3, r1
 800444a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	461a      	mov	r2, r3
 8004456:	210e      	movs	r1, #14
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f003 fb53 	bl	8007b04 <VL53L0X_RdWord>
 800445e:	4603      	mov	r3, r0
 8004460:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004462:	8abb      	ldrh	r3, [r7, #20]
 8004464:	045a      	lsls	r2, r3, #17
 8004466:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <VL53L0X_GetInterruptThresholds+0x64>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800446e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10e      	bne.n	8004494 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004476:	f107 0314 	add.w	r3, r7, #20
 800447a:	461a      	mov	r2, r3
 800447c:	210c      	movs	r1, #12
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f003 fb40 	bl	8007b04 <VL53L0X_RdWord>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004488:	8abb      	ldrh	r3, [r7, #20]
 800448a:	045a      	lsls	r2, r3, #17
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <VL53L0X_GetInterruptThresholds+0x64>)
 800448e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	1ffe0000 	.word	0x1ffe0000

080044a4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80044b6:	2201      	movs	r2, #1
 80044b8:	210b      	movs	r1, #11
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f003 fa76 	bl	80079ac <VL53L0X_WrByte>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80044c4:	2200      	movs	r2, #0
 80044c6:	210b      	movs	r1, #11
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f003 fa6f 	bl	80079ac <VL53L0X_WrByte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80044d8:	f107 030d 	add.w	r3, r7, #13
 80044dc:	461a      	mov	r2, r3
 80044de:	2113      	movs	r1, #19
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f003 fae5 	bl	8007ab0 <VL53L0X_RdByte>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80044f0:	7bbb      	ldrb	r3, [r7, #14]
 80044f2:	3301      	adds	r3, #1
 80044f4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80044f6:	7b7b      	ldrb	r3, [r7, #13]
 80044f8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004500:	7bbb      	ldrb	r3, [r7, #14]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d803      	bhi.n	800450e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0d3      	beq.n	80044b6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800450e:	7bbb      	ldrb	r3, [r7, #14]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004514:	23f4      	movs	r3, #244	@ 0xf4
 8004516:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004532:	f107 030e 	add.w	r3, r7, #14
 8004536:	461a      	mov	r2, r3
 8004538:	2113      	movs	r1, #19
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f003 fab8 	bl	8007ab0 <VL53L0X_RdByte>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004544:	7bbb      	ldrb	r3, [r7, #14]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800454e:	7bbb      	ldrb	r3, [r7, #14]
 8004550:	f003 0318 	and.w	r3, r3, #24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004558:	23fa      	movs	r3, #250	@ 0xfa
 800455a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800455c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fa03 	bl	8004988 <VL53L0X_perform_ref_spad_management>
 8004582:	4603      	mov	r3, r0
 8004584:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80045a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80045a4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80045a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045aa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	461a      	mov	r2, r3
 80045b2:	2128      	movs	r1, #40	@ 0x28
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f003 faa5 	bl	8007b04 <VL53L0X_RdWord>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11e      	bne.n	8004604 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80045c6:	893b      	ldrh	r3, [r7, #8]
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	dd0b      	ble.n	80045f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80045dc:	893a      	ldrh	r2, [r7, #8]
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	461a      	mov	r2, r3
					* 250;
 80045e8:	23fa      	movs	r3, #250	@ 0xfa
 80045ea:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e007      	b.n	8004604 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80045f4:	893b      	ldrh	r3, [r7, #8]
 80045f6:	b21b      	sxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	23fa      	movs	r3, #250	@ 0xfa
 80045fc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004610:	b480      	push	{r7}
 8004612:	b08b      	sub	sp, #44	@ 0x2c
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800461e:	2308      	movs	r3, #8
 8004620:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004640:	69b9      	ldr	r1, [r7, #24]
 8004642:	fb01 f202 	mul.w	r2, r1, r2
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	e030      	b.n	80046b2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	4413      	add	r3, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	429a      	cmp	r2, r3
 8004664:	d11e      	bne.n	80046a4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004666:	7ffa      	ldrb	r2, [r7, #31]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	fa42 f303 	asr.w	r3, r2, r3
 800466e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004674:	e016      	b.n	80046a4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <get_next_good_spad+0x88>
				success = 1;
 8004680:	2301      	movs	r3, #1
 8004682:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	fb03 f202 	mul.w	r2, r3, r2
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	4413      	add	r3, r2
 8004690:	461a      	mov	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	601a      	str	r2, [r3, #0]
				break;
 8004696:	e009      	b.n	80046ac <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004698:	7ffb      	ldrb	r3, [r7, #31]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	3301      	adds	r3, #1
 80046a2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3e4      	bcc.n	8004676 <get_next_good_spad+0x66>
				coarseIndex++) {
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	3301      	adds	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d202      	bcs.n	80046c0 <get_next_good_spad+0xb0>
 80046ba:	7fbb      	ldrb	r3, [r7, #30]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0c7      	beq.n	8004650 <get_next_good_spad+0x40>
		}
	}
}
 80046c0:	bf00      	nop
 80046c2:	372c      	adds	r7, #44	@ 0x2c
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80046de:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <is_aperture+0x30>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <is_aperture+0x22>
		isAperture = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	200002bc 	.word	0x200002bc

08004700 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800470c:	2300      	movs	r3, #0
 800470e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004710:	2308      	movs	r3, #8
 8004712:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	fbb3 f2f2 	udiv	r2, r3, r2
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	fb01 f202 	mul.w	r2, r1, r2
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004738:	23ce      	movs	r3, #206	@ 0xce
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e010      	b.n	8004760 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b25a      	sxtb	r2, r3
 8004748:	2101      	movs	r1, #1
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	b25b      	sxtb	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b259      	sxtb	r1, r3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4413      	add	r3, r2
 800475c:	b2ca      	uxtb	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]

	return status;
 8004760:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3724      	adds	r7, #36	@ 0x24
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800477a:	2306      	movs	r3, #6
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	21b0      	movs	r1, #176	@ 0xb0
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f003 f8b7 	bl	80078f4 <VL53L0X_WriteMulti>
 8004786:	4603      	mov	r3, r0
 8004788:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800478a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80047a0:	2306      	movs	r3, #6
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	21b0      	movs	r1, #176	@ 0xb0
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f003 f8d4 	bl	8007954 <VL53L0X_ReadMulti>
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80047b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	@ 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	460b      	mov	r3, r1
 80047ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80047d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80047d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80047da:	2300      	movs	r3, #0
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047de:	e02b      	b.n	8004838 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80047e0:	f107 031c 	add.w	r3, r7, #28
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff11 	bl	8004610 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d103      	bne.n	80047fe <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80047f6:	23ce      	movs	r3, #206	@ 0xce
 80047f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80047fc:	e020      	b.n	8004840 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	461a      	mov	r2, r3
 8004802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004804:	4413      	add	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ff60 	bl	80046cc <is_aperture>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004816:	23ce      	movs	r3, #206	@ 0xce
 8004818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800481c:	e010      	b.n	8004840 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	f7ff ff6a 	bl	8004700 <enable_spad_bit>
		currentSpad++;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	3301      	adds	r3, #1
 8004830:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	3301      	adds	r3, #1
 8004836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800483a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483c:	429a      	cmp	r2, r3
 800483e:	d3cf      	bcc.n	80047e0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8004846:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff8d 	bl	8004770 <set_ref_spad_map>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800485c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004860:	2b00      	cmp	r3, #0
 8004862:	d121      	bne.n	80048a8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4619      	mov	r1, r3
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff ff93 	bl	8004796 <get_ref_spad_map>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800487a:	e011      	b.n	80048a0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	4413      	add	r3, r2
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	f107 0114 	add.w	r1, r7, #20
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	440b      	add	r3, r1
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d003      	beq.n	800489a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004892:	23ce      	movs	r3, #206	@ 0xce
 8004894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8004898:	e006      	b.n	80048a8 <enable_ref_spads+0xec>
			}
			i++;
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 80048a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d3e9      	bcc.n	800487c <enable_ref_spads+0xc0>
		}
	}
	return status;
 80048a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3730      	adds	r7, #48	@ 0x30
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80048d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80048d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80048dc:	22c0      	movs	r2, #192	@ 0xc0
 80048de:	2101      	movs	r1, #1
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f003 f863 	bl	80079ac <VL53L0X_WrByte>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80048ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fc4c 	bl	8004198 <VL53L0X_PerformSingleRangingMeasurement>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8004906:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800490a:	2b00      	cmp	r3, #0
 800490c:	d107      	bne.n	800491e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800490e:	2201      	movs	r2, #1
 8004910:	21ff      	movs	r1, #255	@ 0xff
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f003 f84a 	bl	80079ac <VL53L0X_WrByte>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800491e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	21b6      	movs	r1, #182	@ 0xb6
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f003 f8ea 	bl	8007b04 <VL53L0X_RdWord>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8004936:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800493e:	2200      	movs	r2, #0
 8004940:	21ff      	movs	r1, #255	@ 0xff
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f003 f832 	bl	80079ac <VL53L0X_WrByte>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800494e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004952:	2b00      	cmp	r3, #0
 8004954:	d112      	bne.n	800497c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004956:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800495a:	461a      	mov	r2, r3
 800495c:	2101      	movs	r1, #1
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f003 f824 	bl	80079ac <VL53L0X_WrByte>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800496a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004978:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800497c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004980:	4618      	mov	r0, r3
 8004982:	3728      	adds	r7, #40	@ 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b09d      	sub	sp, #116	@ 0x74
 800498c:	af06      	add	r7, sp, #24
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800499a:	23b4      	movs	r3, #180	@ 0xb4
 800499c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 80049a0:	2303      	movs	r3, #3
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 80049a4:	232c      	movs	r3, #44	@ 0x2c
 80049a6:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80049b4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80049b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 80049c2:	2306      	movs	r3, #6
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 80049ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f2:	e009      	b.n	8004a08 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a04:	3301      	adds	r3, #1
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3f1      	bcc.n	80049f4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a10:	2201      	movs	r2, #1
 8004a12:	21ff      	movs	r1, #255	@ 0xff
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f002 ffc9 	bl	80079ac <VL53L0X_WrByte>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004a28:	2200      	movs	r2, #0
 8004a2a:	214f      	movs	r1, #79	@ 0x4f
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f002 ffbd 	bl	80079ac <VL53L0X_WrByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004a38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004a40:	222c      	movs	r2, #44	@ 0x2c
 8004a42:	214e      	movs	r1, #78	@ 0x4e
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f002 ffb1 	bl	80079ac <VL53L0X_WrByte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004a50:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	21ff      	movs	r1, #255	@ 0xff
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f002 ffa5 	bl	80079ac <VL53L0X_WrByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a68:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004a70:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004a74:	461a      	mov	r2, r3
 8004a76:	21b6      	movs	r1, #182	@ 0xb6
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f002 ff97 	bl	80079ac <VL53L0X_WrByte>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004a84:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2180      	movs	r1, #128	@ 0x80
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f002 ff8b 	bl	80079ac <VL53L0X_WrByte>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004a9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004aa4:	f107 0210 	add.w	r2, r7, #16
 8004aa8:	f107 0111 	add.w	r1, r7, #17
 8004aac:	2300      	movs	r3, #0
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fbbb 	bl	800522a <VL53L0X_perform_ref_calibration>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004aba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d121      	bne.n	8004b06 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8004ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8004ade:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004ae2:	f107 0218 	add.w	r2, r7, #24
 8004ae6:	9204      	str	r2, [sp, #16]
 8004ae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aea:	9203      	str	r2, [sp, #12]
 8004aec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004aee:	9202      	str	r2, [sp, #8]
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4623      	mov	r3, r4
 8004af8:	4602      	mov	r2, r0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fe5e 	bl	80047bc <enable_ref_spads>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b06:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d174      	bne.n	8004bf8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004b12:	f107 0312 	add.w	r3, r7, #18
 8004b16:	4619      	mov	r1, r3
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff fecb 	bl	80048b4 <perform_ref_signal_measurement>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004b24:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d161      	bne.n	8004bf0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004b2c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004b2e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d25d      	bcs.n	8004bf0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b38:	e009      	b.n	8004b4e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d3f1      	bcc.n	8004b3a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b56:	e002      	b.n	8004b5e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b5e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8004b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b64:	4413      	add	r3, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fdb0 	bl	80046cc <is_aperture>
 8004b6c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <VL53L0X_perform_ref_spad_management+0x1f2>
 8004b72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d3ee      	bcc.n	8004b58 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b80:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8004b8e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004b92:	f107 0218 	add.w	r2, r7, #24
 8004b96:	9204      	str	r2, [sp, #16]
 8004b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b9a:	9203      	str	r2, [sp, #12]
 8004b9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fe06 	bl	80047bc <enable_ref_spads>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004bb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11b      	bne.n	8004bf6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004bc2:	f107 0312 	add.w	r3, r7, #18
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fe73 	bl	80048b4 <perform_ref_signal_measurement>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004bd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004bdc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004bde:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d208      	bcs.n	8004bf6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8004bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004bee:	e002      	b.n	8004bf6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf4:	e000      	b.n	8004bf8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004bf6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004bf8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 80af 	bne.w	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004c02:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004c04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f240 80aa 	bls.w	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 f824 	bl	8007c70 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004c28:	8a7b      	ldrh	r3, [r7, #18]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bfb8      	it	lt
 8004c34:	425b      	neglt	r3, r3
 8004c36:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8004c3e:	e086      	b.n	8004d4e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8004c46:	f107 0314 	add.w	r3, r7, #20
 8004c4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c4e:	f7ff fcdf 	bl	8004610 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d103      	bne.n	8004c62 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004c5a:	23ce      	movs	r3, #206	@ 0xce
 8004c5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8004c60:	e07e      	b.n	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004c62:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4413      	add	r3, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fd2e 	bl	80046cc <is_aperture>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8004c80:	e06e      	b.n	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	3301      	adds	r3, #1
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8004c92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fd32 	bl	8004700 <enable_spad_bit>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cac:	3301      	adds	r3, #1
 8004cae:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fd59 	bl	8004770 <set_ref_spad_map>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004cc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d146      	bne.n	8004d5a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004ccc:	f107 0312 	add.w	r3, r7, #18
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fdee 	bl	80048b4 <perform_ref_signal_measurement>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004cde:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d13b      	bne.n	8004d5e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004ce6:	8a7b      	ldrh	r3, [r7, #18]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfb8      	it	lt
 8004cf2:	425b      	neglt	r3, r3
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004cf6:	8a7b      	ldrh	r3, [r7, #18]
 8004cf8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d21c      	bcs.n	8004d38 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d914      	bls.n	8004d30 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004d06:	f107 031c 	add.w	r3, r7, #28
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fd2f 	bl	8004770 <set_ref_spad_map>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 8004d1e:	f107 011c 	add.w	r1, r7, #28
 8004d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 ffa3 	bl	8007c70 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d36:	e00a      	b.n	8004d4e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 8004d42:	f107 031c 	add.w	r3, r7, #28
 8004d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 ff91 	bl	8007c70 <memcpy>
		while (!complete) {
 8004d4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f43f af74 	beq.w	8004c40 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004d58:	e002      	b.n	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d5e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d60:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d6c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004d74:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004d94:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	375c      	adds	r7, #92	@ 0x5c
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd90      	pop	{r4, r7, pc}

08004da0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b093      	sub	sp, #76	@ 0x4c
 8004da4:	af06      	add	r7, sp, #24
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8004db8:	23b4      	movs	r3, #180	@ 0xb4
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8004dbe:	2306      	movs	r3, #6
 8004dc0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004dc2:	232c      	movs	r3, #44	@ 0x2c
 8004dc4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	21ff      	movs	r1, #255	@ 0xff
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f002 fdee 	bl	80079ac <VL53L0X_WrByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004dd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004dde:	2200      	movs	r2, #0
 8004de0:	214f      	movs	r1, #79	@ 0x4f
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f002 fde2 	bl	80079ac <VL53L0X_WrByte>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004dee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004df6:	222c      	movs	r2, #44	@ 0x2c
 8004df8:	214e      	movs	r1, #78	@ 0x4e
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f002 fdd6 	bl	80079ac <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004e06:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	21ff      	movs	r1, #255	@ 0xff
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f002 fdca 	bl	80079ac <VL53L0X_WrByte>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004e26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	21b6      	movs	r1, #182	@ 0xb6
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f002 fdbc 	bl	80079ac <VL53L0X_WrByte>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3e:	e009      	b.n	8004e54 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	3301      	adds	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3f1      	bcc.n	8004e40 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e62:	e002      	b.n	8004e6a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	3301      	adds	r3, #1
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e6a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	4413      	add	r3, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fc2a 	bl	80046cc <is_aperture>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <VL53L0X_set_reference_spads+0xe6>
 8004e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3ee      	bcc.n	8004e64 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8004e92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e96:	79f9      	ldrb	r1, [r7, #7]
 8004e98:	f107 0214 	add.w	r2, r7, #20
 8004e9c:	9204      	str	r2, [sp, #16]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	9203      	str	r2, [sp, #12]
 8004ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ea4:	9202      	str	r2, [sp, #8]
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	4623      	mov	r3, r4
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fc83 	bl	80047bc <enable_ref_spads>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ebc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	79fa      	ldrb	r2, [r7, #7]
 8004eda:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004ede:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3734      	adds	r7, #52	@ 0x34
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}

08004eea <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f002 fd4c 	bl	80079ac <VL53L0X_WrByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9bf 	bl	80052a4 <VL53L0X_measurement_poll_for_completion>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fab5 	bl	80044a4 <VL53L0X_ClearInterruptMask>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f002 fd2e 	bl	80079ac <VL53L0X_WrByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	70fb      	strb	r3, [r7, #3]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70bb      	strb	r3, [r7, #2]
 8004f76:	4613      	mov	r3, r2
 8004f78:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f82:	2201      	movs	r2, #1
 8004f84:	21ff      	movs	r1, #255	@ 0xff
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 fd10 	bl	80079ac <VL53L0X_WrByte>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f002 fd06 	bl	80079ac <VL53L0X_WrByte>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004faa:	2200      	movs	r2, #0
 8004fac:	21ff      	movs	r1, #255	@ 0xff
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 fcfc 	bl	80079ac <VL53L0X_WrByte>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01e      	beq.n	8005002 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	21cb      	movs	r1, #203	@ 0xcb
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f002 fd6d 	bl	8007ab0 <VL53L0X_RdByte>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02a      	beq.n	800503e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004fe8:	f107 030e 	add.w	r3, r7, #14
 8004fec:	461a      	mov	r2, r3
 8004fee:	21ee      	movs	r1, #238	@ 0xee
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f002 fd5d 	bl	8007ab0 <VL53L0X_RdByte>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e01d      	b.n	800503e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800500a:	78bb      	ldrb	r3, [r7, #2]
 800500c:	461a      	mov	r2, r3
 800500e:	21cb      	movs	r1, #203	@ 0xcb
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f002 fccb 	bl	80079ac <VL53L0X_WrByte>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	4313      	orrs	r3, r2
 800501e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005020:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005028:	787b      	ldrb	r3, [r7, #1]
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	21ee      	movs	r1, #238	@ 0xee
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f002 fd0a 	bl	8007a48 <VL53L0X_UpdateByte>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800503e:	2201      	movs	r2, #1
 8005040:	21ff      	movs	r1, #255	@ 0xff
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 fcb2 	bl	80079ac <VL53L0X_WrByte>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	4313      	orrs	r3, r2
 8005050:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005052:	2201      	movs	r2, #1
 8005054:	2100      	movs	r1, #0
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fca8 	bl	80079ac <VL53L0X_WrByte>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	4313      	orrs	r3, r2
 8005064:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005066:	2200      	movs	r2, #0
 8005068:	21ff      	movs	r1, #255	@ 0xff
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f002 fc9e 	bl	80079ac <VL53L0X_WrByte>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	4313      	orrs	r3, r2
 8005078:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	f023 0310 	bic.w	r3, r3, #16
 8005080:	b2da      	uxtb	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	701a      	strb	r2, [r3, #0]

	return Status;
 8005086:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b08a      	sub	sp, #40	@ 0x28
 8005096:	af04      	add	r7, sp, #16
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	4611      	mov	r1, r2
 800509e:	461a      	mov	r2, r3
 80050a0:	460b      	mov	r3, r1
 80050a2:	71fb      	strb	r3, [r7, #7]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80050c8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80050ca:	2201      	movs	r2, #1
 80050cc:	2101      	movs	r1, #1
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f002 fc6c 	bl	80079ac <VL53L0X_WrByte>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80050d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80050e0:	2140      	movs	r1, #64	@ 0x40
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ff01 	bl	8004eea <VL53L0X_perform_single_ref_calibration>
 80050e8:	4603      	mov	r3, r0
 80050ea:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80050ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <VL53L0X_perform_vhv_calibration+0x8e>
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d112      	bne.n	8005120 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80050fa:	7d39      	ldrb	r1, [r7, #20]
 80050fc:	7d7a      	ldrb	r2, [r7, #21]
 80050fe:	2300      	movs	r3, #0
 8005100:	9303      	str	r3, [sp, #12]
 8005102:	2301      	movs	r3, #1
 8005104:	9302      	str	r3, [sp, #8]
 8005106:	f107 0313 	add.w	r3, r7, #19
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	460b      	mov	r3, r1
 8005112:	2101      	movs	r1, #1
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff ff23 	bl	8004f60 <VL53L0X_ref_calibration_io>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]
 800511e:	e002      	b.n	8005126 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d112      	bne.n	8005154 <VL53L0X_perform_vhv_calibration+0xc2>
 800512e:	79bb      	ldrb	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00f      	beq.n	8005154 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005134:	7dbb      	ldrb	r3, [r7, #22]
 8005136:	461a      	mov	r2, r3
 8005138:	2101      	movs	r1, #1
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f002 fc36 	bl	80079ac <VL53L0X_WrByte>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7dba      	ldrb	r2, [r7, #22]
 8005150:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af04      	add	r7, sp, #16
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	460b      	mov	r3, r1
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	4613      	mov	r3, r2
 8005174:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005186:	79bb      	ldrb	r3, [r7, #6]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005192:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005194:	2202      	movs	r2, #2
 8005196:	2101      	movs	r1, #1
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f002 fc07 	bl	80079ac <VL53L0X_WrByte>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80051a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80051aa:	2100      	movs	r1, #0
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fe9c 	bl	8004eea <VL53L0X_perform_single_ref_calibration>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80051b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d115      	bne.n	80051ea <VL53L0X_perform_phase_calibration+0x8a>
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d112      	bne.n	80051ea <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80051c4:	7d39      	ldrb	r1, [r7, #20]
 80051c6:	7d7a      	ldrb	r2, [r7, #21]
 80051c8:	2301      	movs	r3, #1
 80051ca:	9303      	str	r3, [sp, #12]
 80051cc:	2300      	movs	r3, #0
 80051ce:	9302      	str	r3, [sp, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	f107 0313 	add.w	r3, r7, #19
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	460b      	mov	r3, r1
 80051dc:	2101      	movs	r1, #1
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff febe 	bl	8004f60 <VL53L0X_ref_calibration_io>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
 80051e8:	e002      	b.n	80051f0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80051f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d112      	bne.n	800521e <VL53L0X_perform_phase_calibration+0xbe>
 80051f8:	79bb      	ldrb	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00f      	beq.n	800521e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	461a      	mov	r2, r3
 8005202:	2101      	movs	r1, #1
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f002 fbd1 	bl	80079ac <VL53L0X_WrByte>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800520e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	7dba      	ldrb	r2, [r7, #22]
 800521a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800521e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005238:	2300      	movs	r3, #0
 800523a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005246:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	2300      	movs	r3, #0
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff1f 	bl	8005092 <VL53L0X_perform_vhv_calibration>
 8005254:	4603      	mov	r3, r0
 8005256:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	2300      	movs	r3, #0
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff ff7a 	bl	8005160 <VL53L0X_perform_phase_calibration>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005278:	7dbb      	ldrb	r3, [r7, #22]
 800527a:	461a      	mov	r2, r3
 800527c:	2101      	movs	r1, #1
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f002 fb94 	bl	80079ac <VL53L0X_WrByte>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	7dba      	ldrb	r2, [r7, #22]
 8005294:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80052b8:	f107 030f 	add.w	r3, r7, #15
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fe fe0e 	bl	8003ee0 <VL53L0X_GetMeasurementDataReady>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80052c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d110      	bne.n	80052f2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d00f      	beq.n	80052f6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80052e2:	d302      	bcc.n	80052ea <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80052e4:	23f9      	movs	r3, #249	@ 0xf9
 80052e6:	75fb      	strb	r3, [r7, #23]
			break;
 80052e8:	e006      	b.n	80052f8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f002 fc7c 	bl	8007be8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80052f0:	e7e2      	b.n	80052b8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80052f6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80052f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	3301      	adds	r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	4603      	mov	r3, r0
 8005332:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800535c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005360:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005362:	e002      	b.n	800536a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d8f8      	bhi.n	8005364 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005372:	e017      	b.n	80053a4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4413      	add	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d30b      	bcc.n	8005398 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e002      	b.n	800539e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e4      	bne.n	8005374 <VL53L0X_isqrt+0x24>
	}

	return res;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80053c4:	2200      	movs	r2, #0
 80053c6:	2183      	movs	r1, #131	@ 0x83
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f002 faef 	bl	80079ac <VL53L0X_WrByte>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80053d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11e      	bne.n	800541e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80053e4:	f107 030f 	add.w	r3, r7, #15
 80053e8:	461a      	mov	r2, r3
 80053ea:	2183      	movs	r1, #131	@ 0x83
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f002 fb5f 	bl	8007ab0 <VL53L0X_RdByte>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <VL53L0X_device_read_strobe+0x5a>
 80053fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	3301      	adds	r3, #1
 8005408:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005410:	d3e8      	bcc.n	80053e4 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005418:	d301      	bcc.n	800541e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800541a:	23f9      	movs	r3, #249	@ 0xf9
 800541c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800541e:	2201      	movs	r2, #1
 8005420:	2183      	movs	r1, #131	@ 0x83
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f002 fac2 	bl	80079ac <VL53L0X_WrByte>
 8005428:	4603      	mov	r3, r0
 800542a:	461a      	mov	r2, r3
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	4313      	orrs	r3, r2
 8005430:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005432:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b098      	sub	sp, #96	@ 0x60
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800546e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005486:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800548a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800548e:	2b07      	cmp	r3, #7
 8005490:	f000 8408 	beq.w	8005ca4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005494:	2201      	movs	r2, #1
 8005496:	2180      	movs	r1, #128	@ 0x80
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 fa87 	bl	80079ac <VL53L0X_WrByte>
 800549e:	4603      	mov	r3, r0
 80054a0:	461a      	mov	r2, r3
 80054a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80054ac:	2201      	movs	r2, #1
 80054ae:	21ff      	movs	r1, #255	@ 0xff
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f002 fa7b 	bl	80079ac <VL53L0X_WrByte>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461a      	mov	r2, r3
 80054ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054be:	4313      	orrs	r3, r2
 80054c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80054c4:	2200      	movs	r2, #0
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f002 fa6f 	bl	80079ac <VL53L0X_WrByte>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80054dc:	2206      	movs	r2, #6
 80054de:	21ff      	movs	r1, #255	@ 0xff
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f002 fa63 	bl	80079ac <VL53L0X_WrByte>
 80054e6:	4603      	mov	r3, r0
 80054e8:	461a      	mov	r2, r3
 80054ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80054f4:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80054f8:	461a      	mov	r2, r3
 80054fa:	2183      	movs	r1, #131	@ 0x83
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f002 fad7 	bl	8007ab0 <VL53L0X_RdByte>
 8005502:	4603      	mov	r3, r0
 8005504:	461a      	mov	r2, r3
 8005506:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800550a:	4313      	orrs	r3, r2
 800550c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005510:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	2183      	movs	r1, #131	@ 0x83
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 fa44 	bl	80079ac <VL53L0X_WrByte>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800552c:	4313      	orrs	r3, r2
 800552e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005532:	2207      	movs	r2, #7
 8005534:	21ff      	movs	r1, #255	@ 0xff
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f002 fa38 	bl	80079ac <VL53L0X_WrByte>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005544:	4313      	orrs	r3, r2
 8005546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800554a:	2201      	movs	r2, #1
 800554c:	2181      	movs	r1, #129	@ 0x81
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f002 fa2c 	bl	80079ac <VL53L0X_WrByte>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800555c:	4313      	orrs	r3, r2
 800555e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fb40 	bl	8007be8 <VL53L0X_PollingDelay>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005570:	4313      	orrs	r3, r2
 8005572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005576:	2201      	movs	r2, #1
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f002 fa16 	bl	80079ac <VL53L0X_WrByte>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005588:	4313      	orrs	r3, r2
 800558a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8098 	beq.w	80056ca <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800559a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800559e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8091 	bne.w	80056ca <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80055a8:	226b      	movs	r2, #107	@ 0x6b
 80055aa:	2194      	movs	r1, #148	@ 0x94
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f002 f9fd 	bl	80079ac <VL53L0X_WrByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fef9 	bl	80053b8 <VL53L0X_device_read_strobe>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80055d8:	461a      	mov	r2, r3
 80055da:	2190      	movs	r1, #144	@ 0x90
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f002 fac7 	bl	8007b70 <VL53L0X_RdDWord>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055fa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	0bdb      	lsrs	r3, r3, #15
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800560c:	2224      	movs	r2, #36	@ 0x24
 800560e:	2194      	movs	r1, #148	@ 0x94
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f002 f9cb 	bl	80079ac <VL53L0X_WrByte>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800561e:	4313      	orrs	r3, r2
 8005620:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fec7 	bl	80053b8 <VL53L0X_device_read_strobe>
 800562a:	4603      	mov	r3, r0
 800562c:	461a      	mov	r2, r3
 800562e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005632:	4313      	orrs	r3, r2
 8005634:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005638:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800563c:	461a      	mov	r2, r3
 800563e:	2190      	movs	r1, #144	@ 0x90
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f002 fa95 	bl	8007b70 <VL53L0X_RdDWord>
 8005646:	4603      	mov	r3, r0
 8005648:	461a      	mov	r2, r3
 800564a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800564e:	4313      	orrs	r3, r2
 8005650:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	0e1b      	lsrs	r3, r3, #24
 8005658:	b2db      	uxtb	r3, r3
 800565a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	b2db      	uxtb	r3, r3
 8005662:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b2db      	uxtb	r3, r3
 800566a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	b2db      	uxtb	r3, r3
 8005670:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005672:	2225      	movs	r2, #37	@ 0x25
 8005674:	2194      	movs	r1, #148	@ 0x94
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f002 f998 	bl	80079ac <VL53L0X_WrByte>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005684:	4313      	orrs	r3, r2
 8005686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe94 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005698:	4313      	orrs	r3, r2
 800569a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800569e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80056a2:	461a      	mov	r2, r3
 80056a4:	2190      	movs	r1, #144	@ 0x90
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f002 fa62 	bl	8007b70 <VL53L0X_RdDWord>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8189 	beq.w	80059e8 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80056d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80056da:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8182 	bne.w	80059e8 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80056e4:	2202      	movs	r2, #2
 80056e6:	2194      	movs	r1, #148	@ 0x94
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f002 f95f 	bl	80079ac <VL53L0X_WrByte>
 80056ee:	4603      	mov	r3, r0
 80056f0:	461a      	mov	r2, r3
 80056f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fe5b 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800570a:	4313      	orrs	r3, r2
 800570c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005710:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8005714:	461a      	mov	r2, r3
 8005716:	2190      	movs	r1, #144	@ 0x90
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 f9c9 	bl	8007ab0 <VL53L0X_RdByte>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005726:	4313      	orrs	r3, r2
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800572c:	227b      	movs	r2, #123	@ 0x7b
 800572e:	2194      	movs	r1, #148	@ 0x94
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 f93b 	bl	80079ac <VL53L0X_WrByte>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800573e:	4313      	orrs	r3, r2
 8005740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fe37 	bl	80053b8 <VL53L0X_device_read_strobe>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005752:	4313      	orrs	r3, r2
 8005754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005758:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800575c:	461a      	mov	r2, r3
 800575e:	2190      	movs	r1, #144	@ 0x90
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f002 f9a5 	bl	8007ab0 <VL53L0X_RdByte>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800576e:	4313      	orrs	r3, r2
 8005770:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005774:	2277      	movs	r2, #119	@ 0x77
 8005776:	2194      	movs	r1, #148	@ 0x94
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 f917 	bl	80079ac <VL53L0X_WrByte>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005786:	4313      	orrs	r3, r2
 8005788:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fe13 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800579a:	4313      	orrs	r3, r2
 800579c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057a4:	461a      	mov	r2, r3
 80057a6:	2190      	movs	r1, #144	@ 0x90
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f002 f9e1 	bl	8007b70 <VL53L0X_RdDWord>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	0e5b      	lsrs	r3, r3, #25
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	0c9b      	lsrs	r3, r3, #18
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	0adb      	lsrs	r3, r3, #11
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005806:	2278      	movs	r2, #120	@ 0x78
 8005808:	2194      	movs	r1, #148	@ 0x94
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f002 f8ce 	bl	80079ac <VL53L0X_WrByte>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005818:	4313      	orrs	r3, r2
 800581a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fdca 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800582c:	4313      	orrs	r3, r2
 800582e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005832:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005836:	461a      	mov	r2, r3
 8005838:	2190      	movs	r1, #144	@ 0x90
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f002 f998 	bl	8007b70 <VL53L0X_RdDWord>
 8005840:	4603      	mov	r3, r0
 8005842:	461a      	mov	r2, r3
 8005844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005848:	4313      	orrs	r3, r2
 800584a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	0f5b      	lsrs	r3, r3, #29
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005858:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800585a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800585e:	4413      	add	r3, r2
 8005860:	b2db      	uxtb	r3, r3
 8005862:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	0d9b      	lsrs	r3, r3, #22
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800586e:	b2db      	uxtb	r3, r3
 8005870:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	0bdb      	lsrs	r3, r3, #15
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588a:	b2db      	uxtb	r3, r3
 800588c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005898:	b2db      	uxtb	r3, r3
 800589a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80058ae:	2279      	movs	r2, #121	@ 0x79
 80058b0:	2194      	movs	r1, #148	@ 0x94
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f002 f87a 	bl	80079ac <VL53L0X_WrByte>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fd76 	bl	80053b8 <VL53L0X_device_read_strobe>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80058de:	461a      	mov	r2, r3
 80058e0:	2190      	movs	r1, #144	@ 0x90
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f002 f944 	bl	8007b70 <VL53L0X_RdDWord>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005900:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005902:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005906:	4413      	add	r3, r2
 8005908:	b2db      	uxtb	r3, r3
 800590a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	0cdb      	lsrs	r3, r3, #19
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	b2db      	uxtb	r3, r3
 8005918:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	0b1b      	lsrs	r3, r3, #12
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005924:	b2db      	uxtb	r3, r3
 8005926:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005932:	b2db      	uxtb	r3, r3
 8005934:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	b2db      	uxtb	r3, r3
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005948:	227a      	movs	r2, #122	@ 0x7a
 800594a:	2194      	movs	r1, #148	@ 0x94
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f002 f82d 	bl	80079ac <VL53L0X_WrByte>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800595a:	4313      	orrs	r3, r2
 800595c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fd29 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800596e:	4313      	orrs	r3, r2
 8005970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005974:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005978:	461a      	mov	r2, r3
 800597a:	2190      	movs	r1, #144	@ 0x90
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 f8f7 	bl	8007b70 <VL53L0X_RdDWord>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800598a:	4313      	orrs	r3, r2
 800598c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	0f9b      	lsrs	r3, r3, #30
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800599a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800599c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059a0:	4413      	add	r3, r2
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	0ddb      	lsrs	r3, r3, #23
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	0a5b      	lsrs	r3, r3, #9
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	089b      	lsrs	r3, r3, #2
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80f1 	beq.w	8005bd6 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80059f8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f040 80ea 	bne.w	8005bd6 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005a02:	227b      	movs	r2, #123	@ 0x7b
 8005a04:	2194      	movs	r1, #148	@ 0x94
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 ffd0 	bl	80079ac <VL53L0X_WrByte>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fccc 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a32:	461a      	mov	r2, r3
 8005a34:	2190      	movs	r1, #144	@ 0x90
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 f89a 	bl	8007b70 <VL53L0X_RdDWord>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005a4a:	227c      	movs	r2, #124	@ 0x7c
 8005a4c:	2194      	movs	r1, #148	@ 0x94
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 ffac 	bl	80079ac <VL53L0X_WrByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fca8 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2190      	movs	r1, #144	@ 0x90
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 f876 	bl	8007b70 <VL53L0X_RdDWord>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005a92:	2273      	movs	r2, #115	@ 0x73
 8005a94:	2194      	movs	r1, #148	@ 0x94
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 ff88 	bl	80079ac <VL53L0X_WrByte>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fc84 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005abe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	2190      	movs	r1, #144	@ 0x90
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f002 f852 	bl	8007b70 <VL53L0X_RdDWord>
 8005acc:	4603      	mov	r3, r0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005ae2:	2274      	movs	r2, #116	@ 0x74
 8005ae4:	2194      	movs	r1, #148	@ 0x94
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 ff60 	bl	80079ac <VL53L0X_WrByte>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fc5c 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b12:	461a      	mov	r2, r3
 8005b14:	2190      	movs	r1, #144	@ 0x90
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f002 f82a 	bl	8007b70 <VL53L0X_RdDWord>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005b2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b30:	4313      	orrs	r3, r2
 8005b32:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005b34:	2275      	movs	r2, #117	@ 0x75
 8005b36:	2194      	movs	r1, #148	@ 0x94
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 ff37 	bl	80079ac <VL53L0X_WrByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff fc33 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b64:	461a      	mov	r2, r3
 8005b66:	2190      	movs	r1, #144	@ 0x90
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f002 f801 	bl	8007b70 <VL53L0X_RdDWord>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005b84:	2276      	movs	r2, #118	@ 0x76
 8005b86:	2194      	movs	r1, #148	@ 0x94
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 ff0f 	bl	80079ac <VL53L0X_WrByte>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fc0b 	bl	80053b8 <VL53L0X_device_read_strobe>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2190      	movs	r1, #144	@ 0x90
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 ffd9 	bl	8007b70 <VL53L0X_RdDWord>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005bd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2181      	movs	r1, #129	@ 0x81
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 fee6 	bl	80079ac <VL53L0X_WrByte>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005bee:	2206      	movs	r2, #6
 8005bf0:	21ff      	movs	r1, #255	@ 0xff
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 feda 	bl	80079ac <VL53L0X_WrByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005c06:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2183      	movs	r1, #131	@ 0x83
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 ff4e 	bl	8007ab0 <VL53L0X_RdByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005c22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c26:	f023 0304 	bic.w	r3, r3, #4
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2183      	movs	r1, #131	@ 0x83
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 febb 	bl	80079ac <VL53L0X_WrByte>
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c44:	2201      	movs	r2, #1
 8005c46:	21ff      	movs	r1, #255	@ 0xff
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 feaf 	bl	80079ac <VL53L0X_WrByte>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fea3 	bl	80079ac <VL53L0X_WrByte>
 8005c66:	4603      	mov	r3, r0
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c74:	2200      	movs	r2, #0
 8005c76:	21ff      	movs	r1, #255	@ 0xff
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fe97 	bl	80079ac <VL53L0X_WrByte>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2180      	movs	r1, #128	@ 0x80
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fe8b 	bl	80079ac <VL53L0X_WrByte>
 8005c96:	4603      	mov	r3, r0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005ca4:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 808f 	bne.w	8005dcc <VL53L0X_get_info_from_device+0x98e>
 8005cae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	f000 808a 	beq.w	8005dcc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d024      	beq.n	8005d0c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cc6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d11e      	bne.n	8005d0c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8005cd4:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8005cde:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce6:	e00e      	b.n	8005d06 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cee:	4413      	add	r3, r2
 8005cf0:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d02:	3301      	adds	r3, #1
 8005d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	dded      	ble.n	8005ce8 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005d16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d1a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d112      	bne.n	8005d48 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d22:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d2c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	33f3      	adds	r3, #243	@ 0xf3
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4619      	mov	r1, r3
 8005d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d44:	f001 ff8c 	bl	8007c60 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d030      	beq.n	8005db4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005d52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d56:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d12a      	bne.n	8005db4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d70:	025b      	lsls	r3, r3, #9
 8005d72:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d78:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d011      	beq.n	8005dac <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005d9c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8005da0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005da4:	425b      	negs	r3, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8005dac:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005db4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005dc2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dcc:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3760      	adds	r7, #96	@ 0x60
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005de4:	f240 6277 	movw	r2, #1655	@ 0x677
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005df0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005df4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005e06:	68bb      	ldr	r3, [r7, #8]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005e34:	e005      	b.n	8005e42 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	085b      	lsrs	r3, r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2bff      	cmp	r3, #255	@ 0xff
 8005e46:	d8f6      	bhi.n	8005e36 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005e56:	4413      	add	r3, r2
 8005e58:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005e5a:	8afb      	ldrh	r3, [r7, #22]

}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	0a12      	lsrs	r2, r2, #8
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ff94 	bl	8005dd8 <VL53L0X_calc_macro_period_ps>
 8005eb0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <VL53L0X_calc_timeout_mclks+0x50>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	099b      	lsrs	r3, r3, #6
 8005ec0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ec8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	441a      	add	r2, r3
	timeout_period_mclks =
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005eda:	69fb      	ldr	r3, [r7, #28]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	10624dd3 	.word	0x10624dd3

08005ee8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005efc:	787b      	ldrb	r3, [r7, #1]
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff69 	bl	8005dd8 <VL53L0X_calc_macro_period_ps>
 8005f06:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <VL53L0X_calc_timeout_us+0x50>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	099b      	lsrs	r3, r3, #6
 8005f16:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8005f24:	4a04      	ldr	r2, [pc, #16]	@ (8005f38 <VL53L0X_calc_timeout_us+0x50>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	099b      	lsrs	r3, r3, #6
 8005f2c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	10624dd3 	.word	0x10624dd3

08005f3c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	@ 0x30
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	460b      	mov	r3, r1
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <get_sequence_step_timeout+0x38>
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d002      	beq.n	8005f74 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d127      	bne.n	8005fc4 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f74:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7fd fa8d 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005f88:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005f90:	f107 0320 	add.w	r3, r7, #32
 8005f94:	461a      	mov	r2, r3
 8005f96:	2146      	movs	r1, #70	@ 0x46
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f001 fd89 	bl	8007ab0 <VL53L0X_RdByte>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff ff5d 	bl	8005e68 <VL53L0X_decode_timeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005fb2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005fb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fb8:	4619      	mov	r1, r3
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff ff94 	bl	8005ee8 <VL53L0X_calc_timeout_us>
 8005fc0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005fc2:	e092      	b.n	80060ea <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d135      	bne.n	8006036 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005fca:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7fd fa62 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005fde:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 8081 	bne.w	80060ea <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005fe8:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005fec:	461a      	mov	r2, r3
 8005fee:	2100      	movs	r1, #0
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7fd fa53 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005ffc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8006004:	f107 031e 	add.w	r3, r7, #30
 8006008:	461a      	mov	r2, r3
 800600a:	2151      	movs	r1, #81	@ 0x51
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f001 fd79 	bl	8007b04 <VL53L0X_RdWord>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006018:	8bfb      	ldrh	r3, [r7, #30]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ff24 	bl	8005e68 <VL53L0X_decode_timeout>
 8006020:	4603      	mov	r3, r0
 8006022:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006024:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006028:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800602a:	4619      	mov	r1, r3
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff ff5b 	bl	8005ee8 <VL53L0X_calc_timeout_us>
 8006032:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006034:	e059      	b.n	80060ea <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d156      	bne.n	80060ea <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7fd fb34 	bl	80036b0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01d      	beq.n	800608e <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006052:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006056:	461a      	mov	r2, r3
 8006058:	2100      	movs	r1, #0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7fd fa1e 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006066:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800606e:	f107 031e 	add.w	r3, r7, #30
 8006072:	461a      	mov	r2, r3
 8006074:	2151      	movs	r1, #81	@ 0x51
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 fd44 	bl	8007b04 <VL53L0X_RdWord>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006082:	8bfb      	ldrh	r3, [r7, #30]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff feef 	bl	8005e68 <VL53L0X_decode_timeout>
 800608a:	4603      	mov	r3, r0
 800608c:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800608e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006096:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800609a:	461a      	mov	r2, r3
 800609c:	2101      	movs	r1, #1
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7fd f9fc 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80060aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10f      	bne.n	80060d2 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 80060b2:	f107 031c 	add.w	r3, r7, #28
 80060b6:	461a      	mov	r2, r3
 80060b8:	2171      	movs	r1, #113	@ 0x71
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f001 fd22 	bl	8007b04 <VL53L0X_RdWord>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80060c6:	8bbb      	ldrh	r3, [r7, #28]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fecd 	bl	8005e68 <VL53L0X_decode_timeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80060d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80060da:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80060de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060e0:	4619      	mov	r1, r3
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff00 	bl	8005ee8 <VL53L0X_calc_timeout_us>
 80060e8:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ee:	601a      	str	r2, [r3, #0]

	return Status;
 80060f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	@ 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	@ 0x28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	460b      	mov	r3, r1
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800610a:	2300      	movs	r3, #0
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <set_sequence_step_timeout+0x26>
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d002      	beq.n	8006122 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d138      	bne.n	8006194 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006122:	f107 031b 	add.w	r3, r7, #27
 8006126:	461a      	mov	r2, r3
 8006128:	2100      	movs	r1, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7fd f9b6 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006136:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11a      	bne.n	8006174 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800613e:	7efb      	ldrb	r3, [r7, #27]
 8006140:	461a      	mov	r2, r3
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fea5 	bl	8005e94 <VL53L0X_calc_timeout_mclks>
 800614a:	4603      	mov	r3, r0
 800614c:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800614e:	8bbb      	ldrh	r3, [r7, #28]
 8006150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006154:	d903      	bls.n	800615e <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006156:	23ff      	movs	r3, #255	@ 0xff
 8006158:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800615c:	e004      	b.n	8006168 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800615e:	8bbb      	ldrh	r3, [r7, #28]
 8006160:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006162:	3b01      	subs	r3, #1
 8006164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006168:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006174:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80ab 	bne.w	80062d4 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800617e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006182:	461a      	mov	r2, r3
 8006184:	2146      	movs	r1, #70	@ 0x46
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 fc10 	bl	80079ac <VL53L0X_WrByte>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006192:	e09f      	b.n	80062d4 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d135      	bne.n	8006206 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800619a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11b      	bne.n	80061da <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80061a2:	f107 031b 	add.w	r3, r7, #27
 80061a6:	461a      	mov	r2, r3
 80061a8:	2100      	movs	r1, #0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7fd f976 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80061b6:	7efb      	ldrb	r3, [r7, #27]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fe69 	bl	8005e94 <VL53L0X_calc_timeout_mclks>
 80061c2:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80061c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80061c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fe23 	bl	8005e14 <VL53L0X_encode_timeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80061d2:	8b3a      	ldrh	r2, [r7, #24]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80061da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d108      	bne.n	80061f4 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80061e2:	8b3b      	ldrh	r3, [r7, #24]
 80061e4:	461a      	mov	r2, r3
 80061e6:	2151      	movs	r1, #81	@ 0x51
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 fc03 	bl	80079f4 <VL53L0X_WrWord>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80061f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d16b      	bne.n	80062d4 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8006204:	e066      	b.n	80062d4 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006206:	7afb      	ldrb	r3, [r7, #11]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d160      	bne.n	80062ce <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800620c:	f107 0310 	add.w	r3, r7, #16
 8006210:	4619      	mov	r1, r3
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fd fa4c 	bl	80036b0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006222:	f107 031b 	add.w	r3, r7, #27
 8006226:	461a      	mov	r2, r3
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7fd f936 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006236:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800623e:	f107 0318 	add.w	r3, r7, #24
 8006242:	461a      	mov	r2, r3
 8006244:	2151      	movs	r1, #81	@ 0x51
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 fc5c 	bl	8007b04 <VL53L0X_RdWord>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006252:	8b3b      	ldrh	r3, [r7, #24]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fe07 	bl	8005e68 <VL53L0X_decode_timeout>
 800625a:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800625c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800625e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006266:	f107 031b 	add.w	r3, r7, #27
 800626a:	461a      	mov	r2, r3
 800626c:	2101      	movs	r1, #1
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7fd f914 	bl	800349c <VL53L0X_GetVcselPulsePeriod>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800627a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800627e:	2b00      	cmp	r3, #0
 8006280:	d128      	bne.n	80062d4 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006282:	7efb      	ldrb	r3, [r7, #27]
 8006284:	461a      	mov	r2, r3
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fe03 	bl	8005e94 <VL53L0X_calc_timeout_mclks>
 800628e:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006290:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	4413      	add	r3, r2
 8006296:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006298:	6a38      	ldr	r0, [r7, #32]
 800629a:	f7ff fdbb 	bl	8005e14 <VL53L0X_encode_timeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80062a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d108      	bne.n	80062bc <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80062aa:	8bfb      	ldrh	r3, [r7, #30]
 80062ac:	461a      	mov	r2, r3
 80062ae:	2171      	movs	r1, #113	@ 0x71
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fb9f 	bl	80079f4 <VL53L0X_WrWord>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80062bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80062cc:	e002      	b.n	80062d4 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062ce:	23fc      	movs	r3, #252	@ 0xfc
 80062d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 80062d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3728      	adds	r7, #40	@ 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	@ 0x28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
 80062ec:	4613      	mov	r3, r2
 80062ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80062f6:	230c      	movs	r3, #12
 80062f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80062fc:	2312      	movs	r3, #18
 80062fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006302:	2308      	movs	r3, #8
 8006304:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006308:	230e      	movs	r3, #14
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006312:	78bb      	ldrb	r3, [r7, #2]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800631e:	23fc      	movs	r3, #252	@ 0xfc
 8006320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006324:	e020      	b.n	8006368 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10d      	bne.n	8006348 <VL53L0X_set_vcsel_pulse_period+0x68>
 800632c:	78ba      	ldrb	r2, [r7, #2]
 800632e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006332:	429a      	cmp	r2, r3
 8006334:	d304      	bcc.n	8006340 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006336:	78ba      	ldrb	r2, [r7, #2]
 8006338:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800633c:	429a      	cmp	r2, r3
 800633e:	d903      	bls.n	8006348 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006340:	23fc      	movs	r3, #252	@ 0xfc
 8006342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006346:	e00f      	b.n	8006368 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10c      	bne.n	8006368 <VL53L0X_set_vcsel_pulse_period+0x88>
 800634e:	78ba      	ldrb	r2, [r7, #2]
 8006350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006354:	429a      	cmp	r2, r3
 8006356:	d304      	bcc.n	8006362 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006358:	78ba      	ldrb	r2, [r7, #2]
 800635a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800635e:	429a      	cmp	r2, r3
 8006360:	d902      	bls.n	8006368 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006362:	23fc      	movs	r3, #252	@ 0xfc
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006370:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006374:	e237      	b.n	80067e6 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d150      	bne.n	800641e <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800637c:	78bb      	ldrb	r3, [r7, #2]
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d110      	bne.n	80063a4 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006382:	2218      	movs	r2, #24
 8006384:	2157      	movs	r1, #87	@ 0x57
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fb10 	bl	80079ac <VL53L0X_WrByte>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006392:	2208      	movs	r2, #8
 8006394:	2156      	movs	r1, #86	@ 0x56
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fb08 	bl	80079ac <VL53L0X_WrByte>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063a2:	e17f      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80063a4:	78bb      	ldrb	r3, [r7, #2]
 80063a6:	2b0e      	cmp	r3, #14
 80063a8:	d110      	bne.n	80063cc <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80063aa:	2230      	movs	r2, #48	@ 0x30
 80063ac:	2157      	movs	r1, #87	@ 0x57
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fafc 	bl	80079ac <VL53L0X_WrByte>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80063ba:	2208      	movs	r2, #8
 80063bc:	2156      	movs	r1, #86	@ 0x56
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 faf4 	bl	80079ac <VL53L0X_WrByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063ca:	e16b      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80063cc:	78bb      	ldrb	r3, [r7, #2]
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d110      	bne.n	80063f4 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	2157      	movs	r1, #87	@ 0x57
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 fae8 	bl	80079ac <VL53L0X_WrByte>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80063e2:	2208      	movs	r2, #8
 80063e4:	2156      	movs	r1, #86	@ 0x56
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fae0 	bl	80079ac <VL53L0X_WrByte>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063f2:	e157      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80063f4:	78bb      	ldrb	r3, [r7, #2]
 80063f6:	2b12      	cmp	r3, #18
 80063f8:	f040 8154 	bne.w	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80063fc:	2250      	movs	r2, #80	@ 0x50
 80063fe:	2157      	movs	r1, #87	@ 0x57
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fad3 	bl	80079ac <VL53L0X_WrByte>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800640c:	2208      	movs	r2, #8
 800640e:	2156      	movs	r1, #86	@ 0x56
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 facb 	bl	80079ac <VL53L0X_WrByte>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800641c:	e142      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	2b01      	cmp	r3, #1
 8006422:	f040 813f 	bne.w	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006426:	78bb      	ldrb	r3, [r7, #2]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d14c      	bne.n	80064c6 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800642c:	2210      	movs	r2, #16
 800642e:	2148      	movs	r1, #72	@ 0x48
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fabb 	bl	80079ac <VL53L0X_WrByte>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800643c:	2208      	movs	r2, #8
 800643e:	2147      	movs	r1, #71	@ 0x47
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fab3 	bl	80079ac <VL53L0X_WrByte>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800644c:	2202      	movs	r2, #2
 800644e:	2132      	movs	r1, #50	@ 0x32
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 faab 	bl	80079ac <VL53L0X_WrByte>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800645e:	4313      	orrs	r3, r2
 8006460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006464:	220c      	movs	r2, #12
 8006466:	2130      	movs	r1, #48	@ 0x30
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fa9f 	bl	80079ac <VL53L0X_WrByte>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006476:	4313      	orrs	r3, r2
 8006478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800647c:	2201      	movs	r2, #1
 800647e:	21ff      	movs	r1, #255	@ 0xff
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fa93 	bl	80079ac <VL53L0X_WrByte>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800648e:	4313      	orrs	r3, r2
 8006490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006494:	2230      	movs	r2, #48	@ 0x30
 8006496:	2130      	movs	r1, #48	@ 0x30
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fa87 	bl	80079ac <VL53L0X_WrByte>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80064ac:	2200      	movs	r2, #0
 80064ae:	21ff      	movs	r1, #255	@ 0xff
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fa7b 	bl	80079ac <VL53L0X_WrByte>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064be:	4313      	orrs	r3, r2
 80064c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064c4:	e0ee      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80064c6:	78bb      	ldrb	r3, [r7, #2]
 80064c8:	2b0a      	cmp	r3, #10
 80064ca:	d14c      	bne.n	8006566 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80064cc:	2228      	movs	r2, #40	@ 0x28
 80064ce:	2148      	movs	r1, #72	@ 0x48
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fa6b 	bl	80079ac <VL53L0X_WrByte>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80064dc:	2208      	movs	r2, #8
 80064de:	2147      	movs	r1, #71	@ 0x47
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fa63 	bl	80079ac <VL53L0X_WrByte>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80064ec:	2203      	movs	r2, #3
 80064ee:	2132      	movs	r1, #50	@ 0x32
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 fa5b 	bl	80079ac <VL53L0X_WrByte>
 80064f6:	4603      	mov	r3, r0
 80064f8:	461a      	mov	r2, r3
 80064fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064fe:	4313      	orrs	r3, r2
 8006500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006504:	2209      	movs	r2, #9
 8006506:	2130      	movs	r1, #48	@ 0x30
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fa4f 	bl	80079ac <VL53L0X_WrByte>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006516:	4313      	orrs	r3, r2
 8006518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800651c:	2201      	movs	r2, #1
 800651e:	21ff      	movs	r1, #255	@ 0xff
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 fa43 	bl	80079ac <VL53L0X_WrByte>
 8006526:	4603      	mov	r3, r0
 8006528:	461a      	mov	r2, r3
 800652a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652e:	4313      	orrs	r3, r2
 8006530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006534:	2220      	movs	r2, #32
 8006536:	2130      	movs	r1, #48	@ 0x30
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fa37 	bl	80079ac <VL53L0X_WrByte>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006546:	4313      	orrs	r3, r2
 8006548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800654c:	2200      	movs	r2, #0
 800654e:	21ff      	movs	r1, #255	@ 0xff
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fa2b 	bl	80079ac <VL53L0X_WrByte>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655e:	4313      	orrs	r3, r2
 8006560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006564:	e09e      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006566:	78bb      	ldrb	r3, [r7, #2]
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d14c      	bne.n	8006606 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800656c:	2238      	movs	r2, #56	@ 0x38
 800656e:	2148      	movs	r1, #72	@ 0x48
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fa1b 	bl	80079ac <VL53L0X_WrByte>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800657c:	2208      	movs	r2, #8
 800657e:	2147      	movs	r1, #71	@ 0x47
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fa13 	bl	80079ac <VL53L0X_WrByte>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800658c:	2203      	movs	r2, #3
 800658e:	2132      	movs	r1, #50	@ 0x32
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fa0b 	bl	80079ac <VL53L0X_WrByte>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800659e:	4313      	orrs	r3, r2
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80065a4:	2208      	movs	r2, #8
 80065a6:	2130      	movs	r1, #48	@ 0x30
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f9ff 	bl	80079ac <VL53L0X_WrByte>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461a      	mov	r2, r3
 80065b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80065bc:	2201      	movs	r2, #1
 80065be:	21ff      	movs	r1, #255	@ 0xff
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f9f3 	bl	80079ac <VL53L0X_WrByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80065d4:	2220      	movs	r2, #32
 80065d6:	2130      	movs	r1, #48	@ 0x30
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f9e7 	bl	80079ac <VL53L0X_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80065ec:	2200      	movs	r2, #0
 80065ee:	21ff      	movs	r1, #255	@ 0xff
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f001 f9db 	bl	80079ac <VL53L0X_WrByte>
 80065f6:	4603      	mov	r3, r0
 80065f8:	461a      	mov	r2, r3
 80065fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065fe:	4313      	orrs	r3, r2
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006604:	e04e      	b.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006606:	78bb      	ldrb	r3, [r7, #2]
 8006608:	2b0e      	cmp	r3, #14
 800660a:	d14b      	bne.n	80066a4 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800660c:	2248      	movs	r2, #72	@ 0x48
 800660e:	2148      	movs	r1, #72	@ 0x48
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f9cb 	bl	80079ac <VL53L0X_WrByte>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800661c:	2208      	movs	r2, #8
 800661e:	2147      	movs	r1, #71	@ 0x47
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f9c3 	bl	80079ac <VL53L0X_WrByte>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800662c:	2203      	movs	r2, #3
 800662e:	2132      	movs	r1, #50	@ 0x32
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f9bb 	bl	80079ac <VL53L0X_WrByte>
 8006636:	4603      	mov	r3, r0
 8006638:	461a      	mov	r2, r3
 800663a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800663e:	4313      	orrs	r3, r2
 8006640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006644:	2207      	movs	r2, #7
 8006646:	2130      	movs	r1, #48	@ 0x30
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f9af 	bl	80079ac <VL53L0X_WrByte>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006656:	4313      	orrs	r3, r2
 8006658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800665c:	2201      	movs	r2, #1
 800665e:	21ff      	movs	r1, #255	@ 0xff
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f9a3 	bl	80079ac <VL53L0X_WrByte>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800666e:	4313      	orrs	r3, r2
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006674:	2220      	movs	r2, #32
 8006676:	2130      	movs	r1, #48	@ 0x30
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f997 	bl	80079ac <VL53L0X_WrByte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006686:	4313      	orrs	r3, r2
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800668c:	2200      	movs	r2, #0
 800668e:	21ff      	movs	r1, #255	@ 0xff
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f98b 	bl	80079ac <VL53L0X_WrByte>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800669e:	4313      	orrs	r3, r2
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80066a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d17e      	bne.n	80067aa <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80066ac:	78bb      	ldrb	r3, [r7, #2]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fe3b 	bl	800532a <VL53L0X_encode_vcsel_period>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d045      	beq.n	8006750 <VL53L0X_set_vcsel_pulse_period+0x470>
 80066c4:	e06e      	b.n	80067a4 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	461a      	mov	r2, r3
 80066cc:	2103      	movs	r1, #3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fc34 	bl	8005f3c <get_sequence_step_timeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80066da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80066e2:	f107 0310 	add.w	r3, r7, #16
 80066e6:	461a      	mov	r2, r3
 80066e8:	2102      	movs	r1, #2
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fc26 	bl	8005f3c <get_sequence_step_timeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80066f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80066fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006702:	461a      	mov	r2, r3
 8006704:	2150      	movs	r1, #80	@ 0x50
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 f950 	bl	80079ac <VL53L0X_WrByte>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006712:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006716:	2b00      	cmp	r3, #0
 8006718:	d108      	bne.n	800672c <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	461a      	mov	r2, r3
 800671e:	2103      	movs	r1, #3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fceb 	bl	80060fc <set_sequence_step_timeout>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800672c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	461a      	mov	r2, r3
 8006738:	2102      	movs	r1, #2
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fcde 	bl	80060fc <set_sequence_step_timeout>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	78ba      	ldrb	r2, [r7, #2]
 800674a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800674e:	e02c      	b.n	80067aa <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006750:	f107 0318 	add.w	r3, r7, #24
 8006754:	461a      	mov	r2, r3
 8006756:	2104      	movs	r1, #4
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fbef 	bl	8005f3c <get_sequence_step_timeout>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006764:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800676c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006770:	461a      	mov	r2, r3
 8006772:	2170      	movs	r1, #112	@ 0x70
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 f919 	bl	80079ac <VL53L0X_WrByte>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006780:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006784:	2b00      	cmp	r3, #0
 8006786:	d108      	bne.n	800679a <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	461a      	mov	r2, r3
 800678c:	2104      	movs	r1, #4
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fcb4 	bl	80060fc <set_sequence_step_timeout>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	78ba      	ldrb	r2, [r7, #2]
 800679e:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80067a2:	e002      	b.n	80067aa <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067a4:	23fc      	movs	r3, #252	@ 0xfc
 80067a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80067aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fc fe30 	bl	8003420 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80067c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 80067ce:	f107 010f 	add.w	r1, r7, #15
 80067d2:	2301      	movs	r3, #1
 80067d4:	2200      	movs	r2, #0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fe fcc2 	bl	8005160 <VL53L0X_perform_phase_calibration>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80067e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3728      	adds	r7, #40	@ 0x28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	460b      	mov	r3, r1
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006806:	2b01      	cmp	r3, #1
 8006808:	d00a      	beq.n	8006820 <VL53L0X_get_vcsel_pulse_period+0x32>
 800680a:	e013      	b.n	8006834 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800680c:	f107 0316 	add.w	r3, r7, #22
 8006810:	461a      	mov	r2, r3
 8006812:	2150      	movs	r1, #80	@ 0x50
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f001 f94b 	bl	8007ab0 <VL53L0X_RdByte>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800681e:	e00b      	b.n	8006838 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006820:	f107 0316 	add.w	r3, r7, #22
 8006824:	461a      	mov	r2, r3
 8006826:	2170      	movs	r1, #112	@ 0x70
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f001 f941 	bl	8007ab0 <VL53L0X_RdByte>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006832:	e001      	b.n	8006838 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006834:	23fc      	movs	r3, #252	@ 0xfc
 8006836:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d107      	bne.n	8006850 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006840:	7dbb      	ldrb	r3, [r7, #22]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fd5e 	bl	8005304 <VL53L0X_decode_vcsel_period>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	701a      	strb	r2, [r3, #0]

	return Status;
 8006850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b092      	sub	sp, #72	@ 0x48
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006866:	2300      	movs	r3, #0
 8006868:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800686c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006870:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006872:	f240 7376 	movw	r3, #1910	@ 0x776
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006878:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800687c:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800687e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006884:	f240 234e 	movw	r3, #590	@ 0x24e
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800688a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006890:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006896:	f240 2326 	movw	r3, #550	@ 0x226
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80068a0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80068a4:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d205      	bcs.n	80068be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068b2:	23fc      	movs	r3, #252	@ 0xfc
 80068b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 80068b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80068bc:	e0aa      	b.n	8006a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80068be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c2:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80068ca:	f107 0314 	add.w	r3, r7, #20
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fc feed 	bl	80036b0 <VL53L0X_GetSequenceStepEnables>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80068dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15b      	bne.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80068e4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80068ea:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80068f0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d052      	beq.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80068f6:	f107 0310 	add.w	r3, r7, #16
 80068fa:	461a      	mov	r2, r3
 80068fc:	2102      	movs	r1, #2
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fb1c 	bl	8005f3c <get_sequence_step_timeout>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800690a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006912:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006916:	e07d      	b.n	8006a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006918:	7d3b      	ldrb	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800691e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006922:	4413      	add	r3, r2
 8006924:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692a:	429a      	cmp	r2, r3
 800692c:	d204      	bcs.n	8006938 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800692e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	643b      	str	r3, [r7, #64]	@ 0x40
 8006936:	e002      	b.n	800693e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006938:	23fc      	movs	r3, #252	@ 0xfc
 800693a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800693e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006946:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800694a:	e063      	b.n	8006a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	4413      	add	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006960:	429a      	cmp	r2, r3
 8006962:	d204      	bcs.n	800696e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006964:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	643b      	str	r3, [r7, #64]	@ 0x40
 800696c:	e016      	b.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800696e:	23fc      	movs	r3, #252	@ 0xfc
 8006970:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006974:	e012      	b.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006976:	7d7b      	ldrb	r3, [r7, #21]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006980:	4413      	add	r3, r2
 8006982:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006988:	429a      	cmp	r2, r3
 800698a:	d204      	bcs.n	8006996 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800698c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	643b      	str	r3, [r7, #64]	@ 0x40
 8006994:	e002      	b.n	800699c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006996:	23fc      	movs	r3, #252	@ 0xfc
 8006998:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800699c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80069a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80069a8:	e034      	b.n	8006a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d019      	beq.n	80069e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	461a      	mov	r2, r3
 80069b6:	2103      	movs	r1, #3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff fabf 	bl	8005f3c <get_sequence_step_timeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c8:	4413      	add	r3, r2
 80069ca:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d204      	bcs.n	80069de <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80069d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	643b      	str	r3, [r7, #64]	@ 0x40
 80069dc:	e002      	b.n	80069e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069de:	23fc      	movs	r3, #252	@ 0xfc
 80069e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80069e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d111      	bne.n	8006a10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80069ec:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80069f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80069fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069fc:	2104      	movs	r1, #4
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fb7c 	bl	80060fc <set_sequence_step_timeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006a10:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3748      	adds	r7, #72	@ 0x48
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b090      	sub	sp, #64	@ 0x40
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006a2c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006a30:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006a32:	f240 7376 	movw	r3, #1910	@ 0x776
 8006a36:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006a38:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006a3e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006a44:	f240 234e 	movw	r3, #590	@ 0x24e
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006a4a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8006a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006a50:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006a56:	f240 2326 	movw	r3, #550	@ 0x226
 8006a5a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006a60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a64:	441a      	add	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006a6a:	f107 0318 	add.w	r3, r7, #24
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fc fe1d 	bl	80036b0 <VL53L0X_GetSequenceStepEnables>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006a7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006a84:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a88:	e075      	b.n	8006b76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006a8a:	7e3b      	ldrb	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006a90:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006a96:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d030      	beq.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fa49 	bl	8005f3c <get_sequence_step_timeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006ab0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d122      	bne.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006ab8:	7e3b      	ldrb	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006ac2:	6939      	ldr	r1, [r7, #16]
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ac8:	441a      	add	r2, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006ace:	7ebb      	ldrb	r3, [r7, #26]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006ad8:	6939      	ldr	r1, [r7, #16]
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	440b      	add	r3, r1
 8006ade:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ae0:	441a      	add	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e00a      	b.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006ae8:	7e7b      	ldrb	r3, [r7, #25]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006af2:	6939      	ldr	r1, [r7, #16]
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006af8:	441a      	add	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006afe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d114      	bne.n	8006b30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006b06:	7efb      	ldrb	r3, [r7, #27]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d011      	beq.n	8006b30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006b0c:	f107 030c 	add.w	r3, r7, #12
 8006b10:	461a      	mov	r2, r3
 8006b12:	2103      	movs	r1, #3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff fa11 	bl	8005f3c <get_sequence_step_timeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b2a:	441a      	add	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d114      	bne.n	8006b62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006b38:	7f3b      	ldrb	r3, [r7, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d011      	beq.n	8006b62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006b3e:	f107 0314 	add.w	r3, r7, #20
 8006b42:	461a      	mov	r2, r3
 8006b44:	2104      	movs	r1, #4
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff f9f8 	bl	8005f3c <get_sequence_step_timeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006b56:	6979      	ldr	r1, [r7, #20]
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b5c:	441a      	add	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b62:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3740      	adds	r7, #64	@ 0x40
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b92:	e0c6      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006ba4:	7cfb      	ldrb	r3, [r7, #19]
 8006ba6:	2bff      	cmp	r3, #255	@ 0xff
 8006ba8:	f040 808d 	bne.w	8006cc6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	747b      	strb	r3, [r7, #17]
			Index++;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006bbc:	7c7b      	ldrb	r3, [r7, #17]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d87e      	bhi.n	8006cc0 <VL53L0X_load_tuning_settings+0x140>
 8006bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <VL53L0X_load_tuning_settings+0x48>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006c13 	.word	0x08006c13
 8006bd0:	08006c4d 	.word	0x08006c4d
 8006bd4:	08006c87 	.word	0x08006c87
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4413      	add	r3, r2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	743b      	strb	r3, [r7, #16]
				Index++;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3301      	adds	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bf8:	7c3b      	ldrb	r3, [r7, #16]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	89ba      	ldrh	r2, [r7, #12]
 8006c0c:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 8006c10:	e087      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	4413      	add	r3, r2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c32:	7c3b      	ldrb	r3, [r7, #16]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	89ba      	ldrh	r2, [r7, #12]
 8006c46:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 8006c4a:	e06a      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c6c:	7c3b      	ldrb	r3, [r7, #16]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	4413      	add	r3, r2
 8006c7a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	89ba      	ldrh	r2, [r7, #12]
 8006c80:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8006c84:	e04d      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	3301      	adds	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ca6:	7c3b      	ldrb	r3, [r7, #16]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	89ba      	ldrh	r2, [r7, #12]
 8006cba:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 8006cbe:	e030      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cc0:	23fc      	movs	r3, #252	@ 0xfc
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e02d      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d828      	bhi.n	8006d1e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	e00f      	b.n	8006d02 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	7819      	ldrb	r1, [r3, #0]
 8006cea:	f107 0208 	add.w	r2, r7, #8
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	7cfb      	ldrb	r3, [r7, #19]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	dbeb      	blt.n	8006ce2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006d0a:	7cfb      	ldrb	r3, [r7, #19]
 8006d0c:	f107 0208 	add.w	r2, r7, #8
 8006d10:	7cb9      	ldrb	r1, [r7, #18]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fdee 	bl	80078f4 <VL53L0X_WriteMulti>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e001      	b.n	8006d22 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d1e:	23fc      	movs	r3, #252	@ 0xfc
 8006d20:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <VL53L0X_load_tuning_settings+0x1b8>
 8006d2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f43f af2e 	beq.w	8006b94 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006d5a:	f107 0313 	add.w	r3, r7, #19
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7fc fd31 	bl	80037c8 <VL53L0X_GetXTalkCompensationEnable>
 8006d66:	4603      	mov	r3, r0
 8006d68:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006d6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d111      	bne.n	8006d96 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	8a9b      	ldrh	r3, [r3, #20]
 8006d82:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3380      	adds	r3, #128	@ 0x80
 8006d90:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b086      	sub	sp, #24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006dba:	f107 0310 	add.w	r3, r7, #16
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff ffbe 	bl	8006d44 <VL53L0X_get_total_xtalk_rate>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	441a      	add	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]

	return Status;
 8006de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b09a      	sub	sp, #104	@ 0x68
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006dfa:	2312      	movs	r3, #18
 8006dfc:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006e02:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006e04:	2342      	movs	r3, #66	@ 0x42
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006e08:	2306      	movs	r3, #6
 8006e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006e0c:	2307      	movs	r3, #7
 8006e0e:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006e24:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	3380      	adds	r3, #128	@ 0x80
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01a      	beq.n	8006e82 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	029b      	lsls	r3, r3, #10
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e58:	4413      	add	r3, r2
 8006e5a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006e5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006e66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e72:	fb03 f303 	mul.w	r3, r3, r3
 8006e76:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e7a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e98:	fb03 f303 	mul.w	r3, r3, r3
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ea0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eaa:	085a      	lsrs	r2, r3, #1
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	441a      	add	r2, r3
 8006eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec8:	d302      	bcc.n	8006ed0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8006eca:	4b54      	ldr	r3, [pc, #336]	@ (800701c <VL53L0X_calc_dmax+0x230>)
 8006ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ece:	e015      	b.n	8006efc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ed2:	085a      	lsrs	r2, r3, #1
 8006ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ed6:	441a      	add	r2, r3
 8006ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef6:	fb03 f303 	mul.w	r3, r3, r3
 8006efa:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efe:	039b      	lsls	r3, r3, #14
 8006f00:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006f04:	4a46      	ldr	r2, [pc, #280]	@ (8007020 <VL53L0X_calc_dmax+0x234>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	fb03 f303 	mul.w	r3, r3, r3
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f18:	fb03 f303 	mul.w	r3, r3, r3
 8006f1c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	3308      	adds	r3, #8
 8006f22:	091b      	lsrs	r3, r3, #4
 8006f24:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f30:	4613      	mov	r3, r2
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	4413      	add	r3, r2
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f40:	0b9b      	lsrs	r3, r3, #14
 8006f42:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f48:	4413      	add	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4413      	add	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	039b      	lsls	r3, r3, #14
 8006f64:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f7e:	fb02 f303 	mul.w	r3, r2, r3
 8006f82:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006f8a:	4a25      	ldr	r2, [pc, #148]	@ (8007020 <VL53L0X_calc_dmax+0x234>)
 8006f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f90:	099b      	lsrs	r3, r3, #6
 8006f92:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <VL53L0X_calc_dmax+0x234>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fac:	3380      	adds	r3, #128	@ 0x80
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	085a      	lsrs	r2, r3, #1
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbe:	441a      	add	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fc8:	e001      	b.n	8006fce <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006fce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006fd0:	f7fe f9be 	bl	8005350 <VL53L0X_isqrt>
 8006fd4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	085a      	lsrs	r2, r3, #1
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	441a      	add	r2, r3
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fec:	e001      	b.n	8006ff2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006ff2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006ff4:	f7fe f9ac 	bl	8005350 <VL53L0X_isqrt>
 8006ff8:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 8006ffa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007004:	429a      	cmp	r2, r3
 8007006:	d902      	bls.n	800700e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800700a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800700c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800700e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 8007012:	4618      	mov	r0, r3
 8007014:	3768      	adds	r7, #104	@ 0x68
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	fff00000 	.word	0xfff00000
 8007020:	10624dd3 	.word	0x10624dd3

08007024 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b0b4      	sub	sp, #208	@ 0xd0
 8007028:	af04      	add	r7, sp, #16
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007032:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8007036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800703a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800703e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007042:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 8007046:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800704a:	f241 235c 	movw	r3, #4700	@ 0x125c
 800704e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007052:	4b9e      	ldr	r3, [pc, #632]	@ (80072cc <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007058:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800705c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800705e:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8007062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800706c:	4b98      	ldr	r3, [pc, #608]	@ (80072d0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800706e:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007074:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007076:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800707a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800707c:	f240 6377 	movw	r3, #1655	@ 0x677
 8007080:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007082:	2300      	movs	r3, #0
 8007084:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007096:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800709a:	0c1b      	lsrs	r3, r3, #16
 800709c:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	461a      	mov	r2, r3
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fe78 	bl	8006da2 <VL53L0X_get_total_signal_rate>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80070b8:	f107 0314 	add.w	r3, r7, #20
 80070bc:	461a      	mov	r2, r3
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff fe3f 	bl	8006d44 <VL53L0X_get_total_xtalk_rate>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80070d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80070f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80070f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d902      	bls.n	8007100 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80070fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007100:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d168      	bne.n	80071da <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800710e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8007118:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800711c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007120:	461a      	mov	r2, r3
 8007122:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7fe feb4 	bl	8005e94 <VL53L0X_calc_timeout_mclks>
 800712c:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800713e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007142:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007146:	461a      	mov	r2, r3
 8007148:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7fe fea1 	bl	8005e94 <VL53L0X_calc_timeout_mclks>
 8007152:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007154:	2303      	movs	r3, #3
 8007156:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800715a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800715e:	2b08      	cmp	r3, #8
 8007160:	d102      	bne.n	8007168 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007162:	2302      	movs	r3, #2
 8007164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800716a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800716e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	02db      	lsls	r3, r3, #11
 8007178:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800717c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007180:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007184:	4a53      	ldr	r2, [pc, #332]	@ (80072d4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007190:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007194:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800719e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071a2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80071a6:	4a4b      	ldr	r2, [pc, #300]	@ (80072d4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	099b      	lsrs	r3, r3, #6
 80071ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3380      	adds	r3, #128	@ 0x80
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80071c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80071cc:	3380      	adds	r3, #128	@ 0x80
 80071ce:	0a1b      	lsrs	r3, r3, #8
 80071d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80071da:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80071e2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80071e6:	e15e      	b.n	80074a6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80071e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10c      	bne.n	8007208 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071f4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071fc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e14c      	b.n	80074a2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007210:	2301      	movs	r3, #1
 8007212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007216:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800721c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721e:	041a      	lsls	r2, r3, #16
 8007220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800722a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800722e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007230:	429a      	cmp	r2, r3
 8007232:	d902      	bls.n	800723a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800723a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800723e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800724a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe f87a 	bl	8005350 <VL53L0X_isqrt>
 800725c:	4603      	mov	r3, r0
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	891b      	ldrh	r3, [r3, #8]
 8007266:	461a      	mov	r2, r3
 8007268:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800726a:	fb02 f303 	mul.w	r3, r2, r3
 800726e:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007272:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007278:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800727a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800727c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007280:	4a14      	ldr	r2, [pc, #80]	@ (80072d4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800728a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800728c:	041b      	lsls	r3, r3, #16
 800728e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007292:	4a10      	ldr	r2, [pc, #64]	@ (80072d4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	099b      	lsrs	r3, r3, #6
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80072a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfb8      	it	lt
 80072ae:	425b      	neglt	r3, r3
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80072b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	7e1b      	ldrb	r3, [r3, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80072c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80072c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072c8:	e033      	b.n	8007332 <VL53L0X_calc_sigma_estimate+0x30e>
 80072ca:	bf00      	nop
 80072cc:	028f87ae 	.word	0x028f87ae
 80072d0:	0006999a 	.word	0x0006999a
 80072d4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80072d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80072e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e8:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80072ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80072f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072fe:	4413      	add	r3, r2
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800730a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800730e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800731c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007320:	fb03 f303 	mul.w	r3, r3, r3
 8007324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800732c:	0b9b      	lsrs	r3, r3, #14
 800732e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734a:	fb03 f303 	mul.w	r3, r3, r3
 800734e:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 8007350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007362:	fb03 f303 	mul.w	r3, r3, r3
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	4413      	add	r3, r2
 800736e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007372:	f7fd ffed 	bl	8005350 <VL53L0X_isqrt>
 8007376:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	3332      	adds	r3, #50	@ 0x32
 8007382:	4a4b      	ldr	r2, [pc, #300]	@ (80074b0 <VL53L0X_calc_sigma_estimate+0x48c>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	095a      	lsrs	r2, r3, #5
 800738a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007398:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80073a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073a8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80073ac:	3308      	adds	r3, #8
 80073ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80073b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073b6:	4a3f      	ldr	r2, [pc, #252]	@ (80074b4 <VL53L0X_calc_sigma_estimate+0x490>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	0b5b      	lsrs	r3, r3, #13
 80073be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80073c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d902      	bls.n	80073d2 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80073cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80073d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073da:	4413      	add	r3, r2
 80073dc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80073e0:	4a35      	ldr	r2, [pc, #212]	@ (80074b8 <VL53L0X_calc_sigma_estimate+0x494>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80073ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073f2:	441a      	add	r2, r3
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd ffa8 	bl	8005350 <VL53L0X_isqrt>
 8007400:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800740e:	4a2a      	ldr	r2, [pc, #168]	@ (80074b8 <VL53L0X_calc_sigma_estimate+0x494>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	099b      	lsrs	r3, r3, #6
 8007416:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800741c:	fb03 f303 	mul.w	r3, r3, r3
 8007420:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	fb03 f303 	mul.w	r3, r3, r3
 8007428:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800742a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	4413      	add	r3, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f7fd ff8d 	bl	8005350 <VL53L0X_isqrt>
 8007436:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <VL53L0X_calc_sigma_estimate+0x43c>
 800744c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <VL53L0X_calc_sigma_estimate+0x43c>
 8007454:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800746e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800747a:	6939      	ldr	r1, [r7, #16]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007484:	9302      	str	r3, [sp, #8]
 8007486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007494:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff fca8 	bl	8006dec <VL53L0X_calc_dmax>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074a2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	37c0      	adds	r7, #192	@ 0xc0
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	51eb851f 	.word	0x51eb851f
 80074b4:	d1b71759 	.word	0xd1b71759
 80074b8:	10624dd3 	.word	0x10624dd3

080074bc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b090      	sub	sp, #64	@ 0x40
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	461a      	mov	r2, r3
 80074c8:	460b      	mov	r3, r1
 80074ca:	72fb      	strb	r3, [r7, #11]
 80074cc:	4613      	mov	r3, r2
 80074ce:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	10db      	asrs	r3, r3, #3
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800751c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d017      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
 8007524:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007528:	2b05      	cmp	r3, #5
 800752a:	d013      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800752c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007530:	2b07      	cmp	r3, #7
 8007532:	d00f      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007534:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007538:	2b0c      	cmp	r3, #12
 800753a:	d00b      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800753c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007540:	2b0d      	cmp	r3, #13
 8007542:	d007      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007544:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007548:	2b0e      	cmp	r3, #14
 800754a:	d003      	beq.n	8007554 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800754c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d103      	bne.n	800755c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800755a:	e002      	b.n	8007562 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007562:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800756a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800756e:	461a      	mov	r2, r3
 8007570:	2100      	movs	r1, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7fc f9fc 	bl	8003970 <VL53L0X_GetLimitCheckEnable>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800757e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007582:	2b00      	cmp	r3, #0
 8007584:	d02e      	beq.n	80075e4 <VL53L0X_get_pal_range_status+0x128>
 8007586:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800758a:	2b00      	cmp	r3, #0
 800758c:	d12a      	bne.n	80075e4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800758e:	f107 0310 	add.w	r3, r7, #16
 8007592:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007596:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fd43 	bl	8007024 <VL53L0X_calc_sigma_estimate>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80075a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80075b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d113      	bne.n	80075e4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80075bc:	f107 0320 	add.w	r3, r7, #32
 80075c0:	461a      	mov	r2, r3
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7fc fa59 	bl	8003a7c <VL53L0X_GetLimitCheckValue>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d006      	beq.n	80075e4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80075da:	429a      	cmp	r2, r3
 80075dc:	d902      	bls.n	80075e4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075ec:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80075f0:	461a      	mov	r2, r3
 80075f2:	2102      	movs	r1, #2
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7fc f9bb 	bl	8003970 <VL53L0X_GetLimitCheckEnable>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007600:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007604:	2b00      	cmp	r3, #0
 8007606:	d044      	beq.n	8007692 <VL53L0X_get_pal_range_status+0x1d6>
 8007608:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800760c:	2b00      	cmp	r3, #0
 800760e:	d140      	bne.n	8007692 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007610:	f107 031c 	add.w	r3, r7, #28
 8007614:	461a      	mov	r2, r3
 8007616:	2102      	movs	r1, #2
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7fc fa2f 	bl	8003a7c <VL53L0X_GetLimitCheckValue>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007624:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007628:	2b00      	cmp	r3, #0
 800762a:	d107      	bne.n	800763c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800762c:	2201      	movs	r2, #1
 800762e:	21ff      	movs	r1, #255	@ 0xff
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f9bb 	bl	80079ac <VL53L0X_WrByte>
 8007636:	4603      	mov	r3, r0
 8007638:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800763c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007644:	f107 0316 	add.w	r3, r7, #22
 8007648:	461a      	mov	r2, r3
 800764a:	21b6      	movs	r1, #182	@ 0xb6
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa59 	bl	8007b04 <VL53L0X_RdWord>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007658:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800765c:	2b00      	cmp	r3, #0
 800765e:	d107      	bne.n	8007670 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007660:	2200      	movs	r2, #0
 8007662:	21ff      	movs	r1, #255	@ 0xff
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f9a1 	bl	80079ac <VL53L0X_WrByte>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	025b      	lsls	r3, r3, #9
 8007674:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800767a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007684:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007688:	429a      	cmp	r2, r3
 800768a:	d902      	bls.n	8007692 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007692:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800769a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800769e:	461a      	mov	r2, r3
 80076a0:	2103      	movs	r1, #3
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7fc f964 	bl	8003970 <VL53L0X_GetLimitCheckEnable>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80076ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d023      	beq.n	80076fe <VL53L0X_get_pal_range_status+0x242>
 80076b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d11f      	bne.n	80076fe <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80076be:	893b      	ldrh	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c8:	e005      	b.n	80076d6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	021a      	lsls	r2, r3, #8
 80076ce:	893b      	ldrh	r3, [r7, #8]
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	461a      	mov	r2, r3
 80076dc:	2103      	movs	r1, #3
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7fc f9cc 	bl	8003a7c <VL53L0X_GetLimitCheckValue>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80076f0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80076f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d202      	bcs.n	80076fe <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d14a      	bne.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007706:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800770a:	2b01      	cmp	r3, #1
 800770c:	d103      	bne.n	8007716 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800770e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007710:	22ff      	movs	r2, #255	@ 0xff
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e042      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007716:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800771a:	2b01      	cmp	r3, #1
 800771c:	d007      	beq.n	800772e <VL53L0X_get_pal_range_status+0x272>
 800771e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007722:	2b02      	cmp	r3, #2
 8007724:	d003      	beq.n	800772e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007726:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800772a:	2b03      	cmp	r3, #3
 800772c:	d103      	bne.n	8007736 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800772e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007730:	2205      	movs	r2, #5
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e032      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007736:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800773a:	2b06      	cmp	r3, #6
 800773c:	d003      	beq.n	8007746 <VL53L0X_get_pal_range_status+0x28a>
 800773e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007742:	2b09      	cmp	r3, #9
 8007744:	d103      	bne.n	800774e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007748:	2204      	movs	r2, #4
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	e026      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800774e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007752:	2b08      	cmp	r3, #8
 8007754:	d007      	beq.n	8007766 <VL53L0X_get_pal_range_status+0x2aa>
 8007756:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800775a:	2b0a      	cmp	r3, #10
 800775c:	d003      	beq.n	8007766 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800775e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d103      	bne.n	800776e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007768:	2203      	movs	r2, #3
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e016      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800776e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007772:	2b04      	cmp	r3, #4
 8007774:	d003      	beq.n	800777e <VL53L0X_get_pal_range_status+0x2c2>
 8007776:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800777a:	2b01      	cmp	r3, #1
 800777c:	d103      	bne.n	8007786 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800777e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007780:	2202      	movs	r2, #2
 8007782:	701a      	strb	r2, [r3, #0]
 8007784:	e00a      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007786:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800778a:	2b01      	cmp	r3, #1
 800778c:	d103      	bne.n	8007796 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800778e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e002      	b.n	800779c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800779c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80077a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077a6:	2200      	movs	r2, #0
 80077a8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80077aa:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80077ae:	461a      	mov	r2, r3
 80077b0:	2101      	movs	r1, #1
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7fc f8dc 	bl	8003970 <VL53L0X_GetLimitCheckEnable>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80077be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d14f      	bne.n	8007866 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80077c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <VL53L0X_get_pal_range_status+0x31a>
 80077ce:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d103      	bne.n	80077de <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80077dc:	e002      	b.n	80077e4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80077ea:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80077ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d003      	beq.n	80077fe <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80077f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007804:	e002      	b.n	800780c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007812:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007816:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <VL53L0X_get_pal_range_status+0x36a>
 800781e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d103      	bne.n	800782e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800782c:	e002      	b.n	8007834 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800783a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800783e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <VL53L0X_get_pal_range_status+0x392>
 8007846:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800784a:	2b01      	cmp	r3, #1
 800784c:	d103      	bne.n	8007856 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007854:	e002      	b.n	800785c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007862:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007866:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800786a:	4618      	mov	r0, r3
 800786c:	3740      	adds	r7, #64	@ 0x40
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007872:	b580      	push	{r7, lr}
 8007874:	b088      	sub	sp, #32
 8007876:	af02      	add	r7, sp, #8
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	330a      	adds	r3, #10
 8007882:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8007890:	4619      	mov	r1, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	b29a      	uxth	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	f7f9 fd29 	bl	80012f4 <HAL_I2C_Master_Transmit>
 80078a2:	4603      	mov	r3, r0
 80078a4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80078a6:	693b      	ldr	r3, [r7, #16]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	330a      	adds	r3, #10
 80078c0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4619      	mov	r1, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	f7f9 fe05 	bl	80014f0 <HAL_I2C_Master_Receive>
 80078e6:	4603      	mov	r3, r0
 80078e8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80078ea:	693b      	ldr	r3, [r7, #16]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	460b      	mov	r3, r1
 8007902:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007904:	2300      	movs	r3, #0
 8007906:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b3f      	cmp	r3, #63	@ 0x3f
 800790c:	d902      	bls.n	8007914 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800790e:	f06f 0303 	mvn.w	r3, #3
 8007912:	e016      	b.n	8007942 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007914:	4a0d      	ldr	r2, [pc, #52]	@ (800794c <VL53L0X_WriteMulti+0x58>)
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	480c      	ldr	r0, [pc, #48]	@ (8007950 <VL53L0X_WriteMulti+0x5c>)
 8007920:	f000 f9a6 	bl	8007c70 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	461a      	mov	r2, r3
 800792a:	4908      	ldr	r1, [pc, #32]	@ (800794c <VL53L0X_WriteMulti+0x58>)
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f7ff ffa0 	bl	8007872 <_I2CWrite>
 8007932:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800793a:	23ec      	movs	r3, #236	@ 0xec
 800793c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800793e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200004f0 	.word	0x200004f0
 8007950:	200004f1 	.word	0x200004f1

08007954 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	460b      	mov	r3, r1
 8007962:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007964:	2300      	movs	r3, #0
 8007966:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007968:	f107 030b 	add.w	r3, r7, #11
 800796c:	2201      	movs	r2, #1
 800796e:	4619      	mov	r1, r3
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff ff7e 	bl	8007872 <_I2CWrite>
 8007976:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800797e:	23ec      	movs	r3, #236	@ 0xec
 8007980:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007982:	e00c      	b.n	800799e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff91 	bl	80078b0 <_I2CRead>
 800798e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007996:	23ec      	movs	r3, #236	@ 0xec
 8007998:	75fb      	strb	r3, [r7, #23]
 800799a:	e000      	b.n	800799e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800799c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800799e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
 80079b8:	4613      	mov	r3, r2
 80079ba:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80079c0:	4a0b      	ldr	r2, [pc, #44]	@ (80079f0 <VL53L0X_WrByte+0x44>)
 80079c2:	78fb      	ldrb	r3, [r7, #3]
 80079c4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80079c6:	4a0a      	ldr	r2, [pc, #40]	@ (80079f0 <VL53L0X_WrByte+0x44>)
 80079c8:	78bb      	ldrb	r3, [r7, #2]
 80079ca:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80079cc:	2202      	movs	r2, #2
 80079ce:	4908      	ldr	r1, [pc, #32]	@ (80079f0 <VL53L0X_WrByte+0x44>)
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff4e 	bl	8007872 <_I2CWrite>
 80079d6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80079de:	23ec      	movs	r3, #236	@ 0xec
 80079e0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80079e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200004f0 	.word	0x200004f0

080079f4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
 8007a00:	4613      	mov	r3, r2
 8007a02:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007a08:	4a0e      	ldr	r2, [pc, #56]	@ (8007a44 <VL53L0X_WrWord+0x50>)
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007a0e:	883b      	ldrh	r3, [r7, #0]
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <VL53L0X_WrWord+0x50>)
 8007a18:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007a1a:	883b      	ldrh	r3, [r7, #0]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <VL53L0X_WrWord+0x50>)
 8007a20:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007a22:	2203      	movs	r2, #3
 8007a24:	4907      	ldr	r1, [pc, #28]	@ (8007a44 <VL53L0X_WrWord+0x50>)
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff ff23 	bl	8007872 <_I2CWrite>
 8007a2c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a34:	23ec      	movs	r3, #236	@ 0xec
 8007a36:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200004f0 	.word	0x200004f0

08007a48 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	70fb      	strb	r3, [r7, #3]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70bb      	strb	r3, [r7, #2]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007a66:	f107 020e 	add.w	r2, r7, #14
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f81e 	bl	8007ab0 <VL53L0X_RdByte>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007a80:	7bba      	ldrb	r2, [r7, #14]
 8007a82:	78bb      	ldrb	r3, [r7, #2]
 8007a84:	4013      	ands	r3, r2
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	787b      	ldrb	r3, [r7, #1]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007a90:	7bba      	ldrb	r2, [r7, #14]
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff ff88 	bl	80079ac <VL53L0X_WrByte>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
 8007aa0:	e000      	b.n	8007aa4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8007aa2:	bf00      	nop
done:
    return Status;
 8007aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007ac2:	f107 030b 	add.w	r3, r7, #11
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4619      	mov	r1, r3
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff fed1 	bl	8007872 <_I2CWrite>
 8007ad0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ad8:	23ec      	movs	r3, #236	@ 0xec
 8007ada:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007adc:	e00c      	b.n	8007af8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8007ade:	2201      	movs	r2, #1
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fee4 	bl	80078b0 <_I2CRead>
 8007ae8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007af0:	23ec      	movs	r3, #236	@ 0xec
 8007af2:	75fb      	strb	r3, [r7, #23]
 8007af4:	e000      	b.n	8007af8 <VL53L0X_RdByte+0x48>
    }
done:
 8007af6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007b16:	f107 030b 	add.w	r3, r7, #11
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff fea7 	bl	8007872 <_I2CWrite>
 8007b24:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007b2c:	23ec      	movs	r3, #236	@ 0xec
 8007b2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007b30:	e015      	b.n	8007b5e <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007b32:	2202      	movs	r2, #2
 8007b34:	490d      	ldr	r1, [pc, #52]	@ (8007b6c <VL53L0X_RdWord+0x68>)
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff feba 	bl	80078b0 <_I2CRead>
 8007b3c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007b44:	23ec      	movs	r3, #236	@ 0xec
 8007b46:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007b48:	e009      	b.n	8007b5e <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <VL53L0X_RdWord+0x68>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4a06      	ldr	r2, [pc, #24]	@ (8007b6c <VL53L0X_RdWord+0x68>)
 8007b54:	7852      	ldrb	r2, [r2, #1]
 8007b56:	4413      	add	r3, r2
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8007b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	200004f0 	.word	0x200004f0

08007b70 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007b82:	f107 030b 	add.w	r3, r7, #11
 8007b86:	2201      	movs	r2, #1
 8007b88:	4619      	mov	r1, r3
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fe71 	bl	8007872 <_I2CWrite>
 8007b90:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007b98:	23ec      	movs	r3, #236	@ 0xec
 8007b9a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007b9c:	e01b      	b.n	8007bd6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	4910      	ldr	r1, [pc, #64]	@ (8007be4 <VL53L0X_RdDWord+0x74>)
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff fe84 	bl	80078b0 <_I2CRead>
 8007ba8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007bb0:	23ec      	movs	r3, #236	@ 0xec
 8007bb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007bb4:	e00f      	b.n	8007bd6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007be4 <VL53L0X_RdDWord+0x74>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	061a      	lsls	r2, r3, #24
 8007bbc:	4b09      	ldr	r3, [pc, #36]	@ (8007be4 <VL53L0X_RdDWord+0x74>)
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	441a      	add	r2, r3
 8007bc4:	4b07      	ldr	r3, [pc, #28]	@ (8007be4 <VL53L0X_RdDWord+0x74>)
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	4413      	add	r3, r2
 8007bcc:	4a05      	ldr	r2, [pc, #20]	@ (8007be4 <VL53L0X_RdDWord+0x74>)
 8007bce:	78d2      	ldrb	r2, [r2, #3]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200004f0 	.word	0x200004f0

08007be8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8007bf4:	2002      	movs	r0, #2
 8007bf6:	f7f8 ff81 	bl	8000afc <HAL_Delay>
    return status;
 8007bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <memset>:
 8007c06:	4402      	add	r2, r0
 8007c08:	4603      	mov	r3, r0
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d100      	bne.n	8007c10 <memset+0xa>
 8007c0e:	4770      	bx	lr
 8007c10:	f803 1b01 	strb.w	r1, [r3], #1
 8007c14:	e7f9      	b.n	8007c0a <memset+0x4>
	...

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1b64      	subs	r4, r4, r5
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2600      	movs	r6, #0
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4d0b      	ldr	r5, [pc, #44]	@ (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f000 f82e 	bl	8007c8c <_init>
 8007c30:	1b64      	subs	r4, r4, r5
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2600      	movs	r6, #0
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	08007cc4 	.word	0x08007cc4
 8007c54:	08007cc4 	.word	0x08007cc4
 8007c58:	08007cc4 	.word	0x08007cc4
 8007c5c:	08007cc8 	.word	0x08007cc8

08007c60 <strcpy>:
 8007c60:	4603      	mov	r3, r0
 8007c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c66:	f803 2b01 	strb.w	r2, [r3], #1
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d1f9      	bne.n	8007c62 <strcpy+0x2>
 8007c6e:	4770      	bx	lr

08007c70 <memcpy>:
 8007c70:	440a      	add	r2, r1
 8007c72:	4291      	cmp	r1, r2
 8007c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c78:	d100      	bne.n	8007c7c <memcpy+0xc>
 8007c7a:	4770      	bx	lr
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c86:	4291      	cmp	r1, r2
 8007c88:	d1f9      	bne.n	8007c7e <memcpy+0xe>
 8007c8a:	bd10      	pop	{r4, pc}

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
